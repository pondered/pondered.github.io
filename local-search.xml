<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>政治学通识</title>
    <link href="/posts/24275777/"/>
    <url>/posts/24275777/</url>
    
    <content type="html"><![CDATA[<h1 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h1><blockquote><p>[!abstract] 政治学通识</p><ul><li><img src="https://wfqqreader-1252317822.image.myqcloud.com/cover/777/24275777/t7_24275777.jpg" alt=" 政治学通识|200"></li><li>书名： 政治学通识</li><li>作者： 包刚升</li><li>简介： 《政治的常识》是作者在复旦大学政治学课程讲义的基础上修改润色而成的。本书力求成为一部通俗易懂、深入浅出的政治学普及入门读物。这部书正是为那些对政治和公共事务感兴趣的读者朋友们而写的。通过本书，作者希望能够帮助读者加深对中国政治与世界政治的认知，帮助读者理解政治学领域的重大议题、主要理论与基本方法，帮助读者养成健全与系统的政治思考能力。</li><li>出版时间 2019-04-01 00:00:00</li><li>ISBN： 9787301263525</li><li>分类： 政治军事-政治</li><li>出版社： 北京大学出版社</li></ul></blockquote><h1 id="高亮划线"><a href="#高亮划线" class="headerlink" title="高亮划线"></a>高亮划线</h1><h1 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h1><h2 id="为什么政治很重要？（代序）"><a href="#为什么政治很重要？（代序）" class="headerlink" title="为什么政治很重要？（代序）"></a>为什么政治很重要？（代序）</h2><h3 id="划线评论"><a href="#划线评论" class="headerlink" title="划线评论"></a>划线评论</h3><ul><li>📌 技术解决方案能否成为一种公共政策，是政策背后的政治决定的。比如，有些措施从技术层面来看是可行的，但是从政治层面来看却难以实施。这样，此种技术解决方案就会被否决掉。因此，治理雾霾貌似是一个技术问题，其实也是一个政治问题。  ^7570425-7Cz8gfaIR<ul><li>💭 这里的政治层面具体是指的是什么？ 如果只是政治层面四个字的话就显得太宽泛了，很多事情都可以用这四个字来形容</li><li>⏱ 2022-09-26 21:07:51</li></ul></li></ul><h3 id="划线评论-1"><a href="#划线评论-1" class="headerlink" title="划线评论"></a>划线评论</h3><ul><li>📌 政治  ^7570425-7Cz7Ghlfi<ul><li>💭 什么是政治？<br>政治有边界么？如果有那边界在哪里？</li><li>⏱ 2022-09-26 20:59:00</li></ul></li></ul><h1 id="本书评论"><a href="#本书评论" class="headerlink" title="本书评论"></a>本书评论</h1>]]></content>
    
    
    <categories>
      
      <category>微信读书</category>
      
      <category>政治军事</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>聊斋志异</title>
    <link href="/posts/814400/"/>
    <url>/posts/814400/</url>
    
    <content type="html"><![CDATA[<h1 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h1><blockquote><p>[!abstract] 聊斋志异</p><ul><li><img src="https://wfqqreader-1252317822.image.myqcloud.com/cover/400/814400/t7_814400.jpg" alt=" 聊斋志异|200"></li><li>书名： 聊斋志异</li><li>作者： 蒲松龄</li><li>简介：     《聊斋志异》是清初的一部短篇小说集，共收小说近五百篇，或讲民间的民俗民习、奇谈异闻、或讲世间万物的奇异变幻、题材极为广泛。《聊斋志异》为读者描绘了一个诡异奇幻的世界，借描绘狐仙鬼怪，反映人间百态，具有浓郁的浪漫主义色彩。书中既有对漆黑如墨的现实的不满，又有对怀才不遇、仕途难攀的不平；既有对贪官污吏狼狈为奸的鞭笞，又有对勇于反抗、敢于复仇的平民的赞叹；而数量最多、质量上乘、写得最美、最动人的是那些人与狐妖、人与鬼神以及人与人之间的纯美爱情。此书历来被视为小说中的翘楚之作，有“空前绝后”的美誉。</li></ul></blockquote><blockquote><ul><li>出版时间 2016-03-21 00:00:00</li><li>ISBN： </li><li>分类： 文学-古典文学</li><li>出版社： 阅文集团</li></ul></blockquote><h1 id="高亮划线"><a href="#高亮划线" class="headerlink" title="高亮划线"></a>高亮划线</h1><h2 id="巩仙"><a href="#巩仙" class="headerlink" title="巩仙"></a>巩仙</h2><ul><li>📌 奸雄在世时无暇自己哀怜自己，而后人却在哀怜他呀！” ^814400-16-26297-26322<ul><li>⏱ 2017-07-02 19:27:28</li></ul></li></ul><h1 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h1><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="划线评论"><a href="#划线评论" class="headerlink" title="划线评论"></a>划线评论</h3><ul><li>📌 奸雄在世时无暇自己哀怜自己，而后人却在哀怜他呀！”  ^7570425-6REDZ3nvi<ul><li>💭 总感觉这话在哪见过   原来是 阿旁宫赋 中的  秦人不暇自哀 而后人哀之</li><li>⏱ 2017-07-02 19:27:28</li></ul></li></ul><h1 id="本书评论"><a href="#本书评论" class="headerlink" title="本书评论"></a>本书评论</h1>]]></content>
    
    
    <categories>
      
      <category>微信读书</category>
      
      <category>文学</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>待办</title>
    <link href="/posts/4224255791/"/>
    <url>/posts/4224255791/</url>
    
    <content type="html"><![CDATA[<p>一种和语言&#x2F;项目无关，对日志收集并分析后对进行链路追踪的服务</p><p>目前市面上链路追踪多使用jeager&#x2F;zipkin等对项目有较强的侵入性，keywalking对项目没有太高的侵入性但是需要针对不同语言做不同的处理。<br>导致在微服务体系下，需要对不同的语言&#x2F;项目进行适配。</p><p>在现有的微服务体系下，对日志进一步的进行处理，</p><p>在微服务项目中不损失性能的情况下，对项目日志收集并分析后可以对日志进行链路追踪的服务</p><p>目前市面上链路追踪多使用jeager&#x2F;zipkin等对项目有较强的侵入性，keywalking对项目没有太高的侵入性但是会在启动时进行代理。<br>两者的处理方式都会导致服务性能损失。</p><p>在现有的微服务体系下，对流量入口添加id用于区分不同的请求，后续在有所有的日志中都讲这个id打印到日志中</p><p>一种微服务日志链路监控方法和系统</p><p>目前市面上使用微服务架构(对一个大型服务进行拆分成多个小型服务且各个服务各自独立)，导致一个请求会在不同的微服务之间流转。<br>且不同的微服务可能由不同的团队开发，使得每个微服务的技术栈不同。这样当这个请求在某个服务出现异常时无法及时得知具体的服务以及具体的错误信息。</p><p>在现有微服务的基础上，请求时通过在流量入口(网关)上生成不同Id，并将这个Id流转到不同的服务上。在日志中将这个Id输出到日志文件中。在通过程序将日志采集并保存到数据库中。</p><ol><li>请求时通过在流量入口(网关)生成requestId,并将requestId随着请求流转到不同的服务上</li><li>通过日志将requestId打印到日志文件中</li><li>将日志收集起来后，在网页端可以查询日志内容并将日志通过链路的方式展示出来</li></ol><p>使用 filebeat采集日志到kafka中，并通过 Spring&#x2F;Quarkus 获取kafka中的日志后整理到 Clickhouse中</p>]]></content>
    
    
    <categories>
      
      <category>稍后阅读</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>稍后阅读</title>
    <link href="/posts/1089617902/"/>
    <url>/posts/1089617902/</url>
    
    <content type="html"><![CDATA[<p><a href="https://tech.meituan.com/2018/11/01/cat-in-depth-java-application-monitoring.html">https://tech.meituan.com/2018/11/01/cat-in-depth-java-application-monitoring.html</a></p><p><a href="https://tecrobe.github.io/blog/post/gfw-history-and-tech/">https://tecrobe.github.io/blog/post/gfw-history-and-tech/</a></p><p><a href="https://polarisxu.studygolang.com/posts/go/managing-multiple-go-versions/">https://polarisxu.studygolang.com/posts/go/managing-multiple-go-versions/</a></p><p><a href="https://blog.trydo.top/p/316">https://blog.trydo.top/p/316</a></p><p><a href="https://chai2010.cn/advanced-go-programming-book/">https://chai2010.cn/advanced-go-programming-book/</a><br><a href="https://www.liwenzhou.com/posts/Go/golang-menu/">https://www.liwenzhou.com/posts/Go/golang-menu/</a></p><p><a href="https://github.com/gopl-zh/gopl-zh.github.com">https://github.com/gopl-zh/gopl-zh.github.com</a></p><p><a href="https://blog.csdn.net/felix021/article/details/109913188">https://blog.csdn.net/felix021/article/details/109913188</a></p><h1 id="稍后阅读"><a href="#稍后阅读" class="headerlink" title="稍后阅读"></a>稍后阅读</h1><ol><li><a href="https://github.com/dianping/cat">https://github.com/dianping/cat</a></li></ol><h2 id="链路追踪"><a href="#链路追踪" class="headerlink" title="链路追踪"></a>链路追踪</h2><ol><li><a href="https://wu-sheng.gitbooks.io/opentracing-io/content/pages/quick-start.html">https://wu-sheng.gitbooks.io/opentracing-io/content/pages/quick-start.html</a></li></ol><p>文本编辑器:</p><ol><li><p><a href="https://www.zhihu.com/question/366666295">https://www.zhihu.com/question/366666295</a></p></li><li><p><a href="https://www.zhihu.com/question/24328297">https://www.zhihu.com/question/24328297</a></p></li><li><p><a href="https://juejin.cn/post/6844904105706520589">https://juejin.cn/post/6844904105706520589</a></p></li><li><p><a href="https://www.zhihu.com/question/37614442">https://www.zhihu.com/question/37614442</a></p></li><li><p><a href="https://www.zhihu.com/question/26739121">https://www.zhihu.com/question/26739121</a></p></li><li><p><a href="http://www.lucklnk.com/godaddy/details/aid/759132747">http://www.lucklnk.com/godaddy/details/aid/759132747</a></p></li><li><p><a href="https://segmentfault.com/a/1190000017203676">https://segmentfault.com/a/1190000017203676</a></p></li><li><p><a href="http://www.alloyteam.com/2015/09/intended-to-achieve-the-rich-text-editor/">http://www.alloyteam.com/2015/09/intended-to-achieve-the-rich-text-editor/</a></p></li><li><p><a href="http://yoyoyohamapi.me/2020/03/01/%E4%BB%8E%E6%B5%81%E8%A1%8C%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8%E6%9E%B6%E6%9E%84%E8%81%8A%E8%81%8A%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E5%9B%B0%E5%A2%83/">http://yoyoyohamapi.me/2020/03/01/%E4%BB%8E%E6%B5%81%E8%A1%8C%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8%E6%9E%B6%E6%9E%84%E8%81%8A%E8%81%8A%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E5%9B%B0%E5%A2%83/</a></p></li><li><p><a href="https://www.infoq.cn/article/kxQkwRksADcMgoQxQHxj">https://www.infoq.cn/article/kxQkwRksADcMgoQxQHxj</a></p></li><li><p><a href="https://aaron-bird.github.io/2019/06/09/%E5%9C%A8%20Vue%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20TinyMCE/">https://aaron-bird.github.io/2019/06/09/%E5%9C%A8%20Vue%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20TinyMCE/</a></p></li><li><p><a href="https://github.com/showdownjs/showdown">https://github.com/showdownjs/showdown</a></p></li><li><p><a href="https://www.zhihu.com/question/24328297">https://www.zhihu.com/question/24328297</a></p></li><li><p><a href="https://www.zhihu.com/question/280118738?utm_source=wechat_session&utm_medium=social&utm_oi=54091971559424">https://www.zhihu.com/question/280118738?utm_source&#x3D;wechat_session&amp;utm_medium&#x3D;social&amp;utm_oi&#x3D;54091971559424</a></p></li><li><p><a href="https://www.zhihu.com/question/34597700/answer/59734994?utm_source=wechat_session&utm_medium=social&utm_oi=54091971559424">https://www.zhihu.com/question/34597700/answer/59734994?utm_source&#x3D;wechat_session&amp;utm_medium&#x3D;social&amp;utm_oi&#x3D;54091971559424</a></p></li><li><p><a href="https://github.com/gchp/iota/issues?utm_source=wechat_session&utm_medium=social&utm_oi=54091971559424">https://github.com/gchp/iota/issues?utm_source&#x3D;wechat_session&amp;utm_medium&#x3D;social&amp;utm_oi&#x3D;54091971559424</a></p></li></ol><p>C#</p><p>Java</p><p>LeetCode</p><p>算法图解</p><p>大话数据结构</p><p>api</p><ol><li><p><a href="https://hellosean1025.github.io/yapi/documents/project.html#%e5%9f%ba%e6%9c%ac%e8%ae%be%e7%bd%ae">https://hellosean1025.github.io/yapi/documents/project.html#%e5%9f%ba%e6%9c%ac%e8%ae%be%e7%bd%ae</a></p></li><li><p><a href="https://www.apifox.cn/help/#%E6%8E%A5%E5%8F%A3%E7%AE%A1%E7%90%86%E7%8E%B0%E7%8A%B6">https://www.apifox.cn/help/#%E6%8E%A5%E5%8F%A3%E7%AE%A1%E7%90%86%E7%8E%B0%E7%8A%B6</a></p></li><li><p>外刊 <a href="https://mgshare.vercel.app/Public/">https://mgshare.vercel.app/Public/</a></p></li><li><p>外刊 <a href="https://waikan.vercel.app/">https://waikan.vercel.app/</a></p></li><li><p>论文 <a href="https://github.com/brucechin/paper">https://github.com/brucechin/paper</a></p></li><li><p>悲壮的学习方式 <a href="https://survivesjtu.gitbook.io/survivesjtumanual/li-zhi-pian/bei-zhuang-de-xue-xi-fang-shi">https://survivesjtu.gitbook.io/survivesjtumanual/li-zhi-pian/bei-zhuang-de-xue-xi-fang-shi</a></p></li><li><p>经济学人 <a href="https://github.com/fredliu168/TheEconomist2021">https://github.com/fredliu168/TheEconomist2021</a></p></li><li><p>外刊 <a href="https://blog.zrszrs.top/2021/07/15/%E5%86%99%E7%BB%99%E6%83%B3%E8%AF%BB%E5%A4%96%E5%88%8A%E7%9A%84%E4%BA%BA/">https://blog.zrszrs.top/2021/07/15/%E5%86%99%E7%BB%99%E6%83%B3%E8%AF%BB%E5%A4%96%E5%88%8A%E7%9A%84%E4%BA%BA/</a></p></li><li><p>响应式 <a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754">https://gist.github.com/staltz/868e7e9bc2a7b8c1f754</a></p></li><li><p>All-In-One <a href="https://github.com/theonedev/onedev">https://github.com/theonedev/onedev</a></p></li><li><p>WebFrmework <a href="https://github.com/tipsy/javalin">https://github.com/tipsy/javalin</a></p></li><li><p>服务鉴权 <a href="https://mp.weixin.qq.com/s/epnm9uqQTdpkNzmSD5GLhw">https://mp.weixin.qq.com/s/epnm9uqQTdpkNzmSD5GLhw</a></p></li><li><p>Spring Security 鉴权 <a href="https://www.jianshu.com/p/d5ce890c67f7">https://www.jianshu.com/p/d5ce890c67f7</a></p></li><li><p>SpringSecurity 鉴权 <a href="https://juejin.cn/post/6914628459361189901">https://juejin.cn/post/6914628459361189901</a></p></li><li><p>鉴权框架 <a href="https://github.com/reinershir/lui-auth">https://github.com/reinershir/lui-auth</a></p></li><li><p>凤凰架构 <a href="https://github.com/fenixsoft/microservice_arch_kubernetes">https://github.com/fenixsoft/microservice_arch_kubernetes</a></p></li><li><p>响应式编程 <a href="https://stackoverflow.com/questions/1028250/what-is-functional-reactive-programming">https://stackoverflow.com/questions/1028250/what-is-functional-reactive-programming</a></p></li><li><p>响应式编程 <a href="https://en.wikipedia.org/wiki/Reactive_programming">https://en.wikipedia.org/wiki/Reactive_programming</a></p></li><li><p>Kotlin <a href="https://doc.devio.org/as/book/docs/Part1/Android">https://doc.devio.org/as/book/docs/Part1/Android</a>开发必备Kotlin核心技术&#x2F;以架构师角度认识Kotlin.html</p></li><li><p>Kotlin 协程 <a href="https://www.jianshu.com/p/76d2f47b900d">https://www.jianshu.com/p/76d2f47b900d</a></p></li><li><p>自顶向下编程 <a href="https://www.cnblogs.com/wenpeng/p/12442069.html">https://www.cnblogs.com/wenpeng/p/12442069.html</a></p></li><li><p>RxJava <a href="https://www.jianshu.com/nb/14302692">https://www.jianshu.com/nb/14302692</a></p></li><li><p>RxJava <a href="https://www.jianshu.com/p/a406b94f3188">https://www.jianshu.com/p/a406b94f3188</a></p></li><li><p>RxJava <a href="https://www.jianshu.com/p/cd3557b1a474">https://www.jianshu.com/p/cd3557b1a474</a></p></li><li><p>Kotlin 实战 <a href="https://book.douban.com/subject/27093660/">https://book.douban.com/subject/27093660/</a></p></li><li><p>Kotlin <a href="https://hltj.gitbooks.io/kotlin-reference-chinese/content/txt/basic-syntax.html">https://hltj.gitbooks.io/kotlin-reference-chinese/content/txt/basic-syntax.html</a></p></li><li><p>Reactor <a href="http://projectreactor.mydoc.io/?t=44478">http://projectreactor.mydoc.io/?t=44478</a></p></li><li><p><a href="https://github.com/GoogleContainerTools/jib">https://github.com/GoogleContainerTools/jib</a></p></li><li><p>SpringSecurity JWT 鉴权 <a href="https://juejin.cn/post/6846687598442708999">https://juejin.cn/post/6846687598442708999</a></p></li><li><p><a href="https://juejin.cn/post/6847902222668431368">https://juejin.cn/post/6847902222668431368</a></p></li><li><p><a href="https://github.com/louyanfeng25/Authentication">https://github.com/louyanfeng25/Authentication</a></p></li></ol><p>vertx <a href="https://github.com/ZuiSong/vertx-scrapy">https://github.com/ZuiSong/vertx-scrapy</a></p><p>多种登录方式</p><ol><li><a href="https://juejin.cn/post/6914959662529904653">https://juejin.cn/post/6914959662529904653</a></li><li><a href="https://zhuanlan.zhihu.com/p/262272935">https://zhuanlan.zhihu.com/p/262272935</a></li><li><a href="https://www.cnblogs.com/bug9/p/11383485.html">https://www.cnblogs.com/bug9/p/11383485.html</a></li></ol><p>入门</p><ol><li><a href="https://www.cnblogs.com/demingblog/p/10874753.html">https://www.cnblogs.com/demingblog/p/10874753.html</a></li><li><a href="https://princeling66.github.io/MyBlog/2021/01/07/Oauth2.0%20%E5%AE%9E%E7%8E%B0%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81%E7%99%BB%E5%BD%95%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3(%E5%BE%AE%E6%9C%8D%E5%8A%A1)/">https://princeling66.github.io/MyBlog/2021/01/07/Oauth2.0%20%E5%AE%9E%E7%8E%B0%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81%E7%99%BB%E5%BD%95%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3(%E5%BE%AE%E6%9C%8D%E5%8A%A1)/</a></li><li><a href="https://niocoder.com/2018/01/05/Spring-Security%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%BA%8C-Spring-Security%E6%8E%88%E6%9D%83%E8%BF%87%E7%A8%8B/">https://niocoder.com/2018/01/05/Spring-Security%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%BA%8C-Spring-Security%E6%8E%88%E6%9D%83%E8%BF%87%E7%A8%8B/</a></li><li><a href="https://niocoder.com/2018/01/02/Spring-Security%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%80-Spring-Security%E8%AE%A4%E8%AF%81%E8%BF%87%E7%A8%8B/#%E7%B1%BB%E5%9B%BE">https://niocoder.com/2018/01/02/Spring-Security%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%80-Spring-Security%E8%AE%A4%E8%AF%81%E8%BF%87%E7%A8%8B/#%E7%B1%BB%E5%9B%BE</a></li><li><a href="https://github.com/longfeizheng/logback">https://github.com/longfeizheng/logback</a></li><li><a href="https://niocoder.com/2018/01/14/Spring-Security%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%BA%94-Spring-Security%E7%9F%AD%E4%BF%A1%E7%99%BB%E5%BD%95/#smscodeauthenticationsecurityconfig%E7%9F%AD%E4%BF%A1%E7%99%BB%E5%BD%95%E9%85%8D%E7%BD%AE">https://niocoder.com/2018/01/14/Spring-Security%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%BA%94-Spring-Security%E7%9F%AD%E4%BF%A1%E7%99%BB%E5%BD%95/#smscodeauthenticationsecurityconfig%E7%9F%AD%E4%BF%A1%E7%99%BB%E5%BD%95%E9%85%8D%E7%BD%AE</a></li><li><a href="https://www.jianshu.com/p/85926fa929d9">https://www.jianshu.com/p/85926fa929d9</a></li></ol><p>反射&#x2F;动态代理</p><ol><li><a href="https://dunwu.github.io/javacore/basics/java-reflection.html#_3-4-%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BE%8B">https://dunwu.github.io/javacore/basics/java-reflection.html#_3-4-%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BE%8B</a></li></ol><p>Kotlin</p><ol><li><a href="https://www.runoob.com/kotlin/kotlin-tutorial.html">https://www.runoob.com/kotlin/kotlin-tutorial.html</a></li></ol><p>Vertx</p><ol><li><p><a href="https://vertxchina.github.io/vertx-translation-chinese/">https://vertxchina.github.io/vertx-translation-chinese/</a></p></li><li><p><a href="https://segmentfault.com/a/1190000021036621">https://segmentfault.com/a/1190000021036621</a></p></li><li><p><a href="https://www.jdon.com/concurrent/vertx.html">https://www.jdon.com/concurrent/vertx.html</a></p></li><li><p><a href="https://www.runoob.com/kotlin/kotlin-tutorial.html">https://www.runoob.com/kotlin/kotlin-tutorial.html</a></p></li><li><p><a href="https://vertx-china.github.io/docs/">https://vertx-china.github.io/docs/</a></p></li><li><p><a href="https://github.com/search?p=6&q=vertx&type=Repositories">https://github.com/search?p=6&q=vertx&type=Repositories</a></p></li><li><p><a href="https://github.com/vert-x3/vertx-awesome">https://github.com/vert-x3/vertx-awesome</a></p></li><li><p><a href="https://vertx-china.github.io/docs/vertx-core/java/">https://vertx-china.github.io/docs/vertx-core/java/</a> vertx 中文社区</p></li><li><p><a href="https://www.jdon.com/concurrent/vertx.html">https://www.jdon.com/concurrent/vertx.html</a> vertx入门</p></li><li><p><a href="https://segmentfault.com/a/1190000021036621">https://segmentfault.com/a/1190000021036621</a> vertx 入门</p></li><li><p><a href="https://vertxchina.github.io/vertx-translation-chinese/">https://vertxchina.github.io/vertx-translation-chinese/</a> vertx 中文文档</p></li></ol><p>Swagger</p><ol><li><a href="https://www.cnblogs.com/lmyupupblogs/p/12965580.html">https://www.cnblogs.com/lmyupupblogs/p/12965580.html</a></li></ol><p>RocketMQ+SpringBoot</p><ol><li><p><a href="https://www.cnblogs.com/coderzhw/p/13589737.html">https://www.cnblogs.com/coderzhw/p/13589737.html</a></p></li><li><p><a href="https://juejin.cn/post/6930869079217717256">https://juejin.cn/post/6930869079217717256</a></p></li></ol><p>Test</p><ol><li><p><a href="http://www.phpheidong.com/blog/article/98145/c7120b11a2eb5db71b3c/">http://www.phpheidong.com/blog/article/98145/c7120b11a2eb5db71b3c/</a></p></li><li><p><a href="https://demo.metersphere.com/#/track/issue">https://demo.metersphere.com/#/track/issue</a></p></li></ol><p>契约测试</p><ol><li><a href="https://www.cnblogs.com/freshchen/p/12229452.html">https://www.cnblogs.com/freshchen/p/12229452.html</a></li></ol><p>Gradle</p><ol start="0"><li><p><a href="https://gitee.com/lmay/micros-gradle-examples">https://gitee.com/lmay/micros-gradle-examples</a></p></li><li><p><a href="https://www.baeldung.com/spring-boot-gradle-plugin">https://www.baeldung.com/spring-boot-gradle-plugin</a></p></li><li><p><a href="https://juejin.cn/post/6844904200120303623#comment">https://juejin.cn/post/6844904200120303623#comment</a></p></li><li><p>Gradle 关键字 <a href="https://www.cnblogs.com/jcb1991/p/13644837.html">https://www.cnblogs.com/jcb1991/p/13644837.html</a></p></li></ol><p>租户</p><ol><li><p><a href="https://www.jianshu.com/p/742f40eb9937">https://www.jianshu.com/p/742f40eb9937</a></p></li><li><p><a href="https://xie.infoq.cn/article/4ced810e6aadb131e4ae8e66f">https://xie.infoq.cn/article/4ced810e6aadb131e4ae8e66f</a></p></li><li><p><a href="https://segmentfault.com/a/1190000022320162">https://segmentfault.com/a/1190000022320162</a></p></li></ol><p>DDD</p><ol><li><p><a href="https://www.cnblogs.com/jiyukai/p/14830869.html">https://www.cnblogs.com/jiyukai/p/14830869.html</a></p></li><li><p><a href="https://juejin.cn/post/6844904058063437831">https://juejin.cn/post/6844904058063437831</a></p></li></ol><p>K8S</p><ol><li><p><a href="https://cn.ubuntu.com/blog/how-to-install-kubernetes-on-mac">https://cn.ubuntu.com/blog/how-to-install-kubernetes-on-mac</a></p></li><li><p><a href="https://github.com/fenixsoft/microservice_arch_kubernetes">https://github.com/fenixsoft/microservice_arch_kubernetes</a></p></li></ol><p><a href="https://wch853.github.io/posts/jvm/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E8%87%AA%E5%8A%A8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6.html#%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80">https://wch853.github.io/posts/jvm/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E8%87%AA%E5%8A%A8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6.html#%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80</a></p><p><a href="https://zhuanlan.zhihu.com/p/360650685">https://zhuanlan.zhihu.com/p/360650685</a></p><p><a href="https://www.cnblogs.com/fengzheng/p/11724625.html">https://www.cnblogs.com/fengzheng/p/11724625.html</a></p><p><a href="https://segmentfault.com/a/1190000019894976">https://segmentfault.com/a/1190000019894976</a><br><a href="https://juejin.cn/post/6995474299167440932">https://juejin.cn/post/6995474299167440932</a></p><p><a href="https://juejin.cn/post/6896679498651107341">https://juejin.cn/post/6896679498651107341</a></p><p><a href="https://www.cnblogs.com/haoxianrui/p/14961707.html">https://www.cnblogs.com/haoxianrui/p/14961707.html</a></p><p><a href="https://www.jianshu.com/p/286cac4625b6">https://www.jianshu.com/p/286cac4625b6</a></p><p><a href="https://www.cnblogs.com/qdhxhz/p/11191399.html">https://www.cnblogs.com/qdhxhz/p/11191399.html</a></p><p><a href="https://www.jdon.com/reactive.html">https://www.jdon.com/reactive.html</a></p><p><a href="https://juejin.cn/post/7011418596807016484">https://juejin.cn/post/7011418596807016484</a></p><p><a href="http://zzyongx.github.io/blogs/index.html">http://zzyongx.github.io/blogs/index.html</a></p><p><a href="https://mp.weixin.qq.com/s/r3G8Te9f9uXSbf8YaUV6MA">https://mp.weixin.qq.com/s/r3G8Te9f9uXSbf8YaUV6MA</a></p><p><a href="https://www.douban.com/doulist/2545443/">https://www.douban.com/doulist/2545443/</a></p><p><a href="https://www.douban.com/people/RednaxelaFX/">https://www.douban.com/people/RednaxelaFX/</a></p><ol><li><a href="https://www.zhihu.com/answer/1844956560">https://www.zhihu.com/answer/1844956560</a></li><li><a href="https://www.zhihu.com/question/21405835">https://www.zhihu.com/question/21405835</a></li><li><a href="https://www.zhihu.com/question/446988424">https://www.zhihu.com/question/446988424</a></li><li><a href="https://www.zhihu.com/question/270998611">https://www.zhihu.com/question/270998611</a></li><li><a href="http://www.zhihu.com/question/19934502?utm_source=com.candykk.android.messaging&utm_medium=social&utm_oi=54091971559424">http://www.zhihu.com/question/19934502?utm_source&#x3D;com.candykk.android.messaging&amp;utm_medium&#x3D;social&amp;utm_oi&#x3D;54091971559424</a></li><li><a href="https://www.zhihu.com/question/20803763">https://www.zhihu.com/question/20803763</a></li><li><a href="https://gudaoxuri.gitbook.io/microservices-architecture/">https://gudaoxuri.gitbook.io/microservices-architecture/</a></li><li><a href="https://www.zhihu.com/question/51174287/answer/168169191">https://www.zhihu.com/question/51174287/answer/168169191</a></li><li><a href="https://www.zhihu.com/question/20803763">https://www.zhihu.com/question/20803763</a></li><li><a href="https://www.zhihu.com/question/35852265">https://www.zhihu.com/question/35852265</a></li><li><a href="https://www.zhihu.com/question/61539640">https://www.zhihu.com/question/61539640</a></li><li><a href="http://www.cnblogs.com/ToDoToTry/archive/2009/06/21/1507760.html">http://www.cnblogs.com/ToDoToTry/archive/2009/06/21/1507760.html</a></li><li><a href="http://blog.a0z.me/2016/04/28/how-to-read-open-project">http://blog.a0z.me/2016/04/28/how-to-read-open-project</a></li><li><a href="https://github.com/Sayi/sayi.github.com/issues">https://github.com/Sayi/sayi.github.com/issues</a></li><li><a href="https://www.zhihu.com/question/281940376/answer/476322031">https://www.zhihu.com/question/281940376/answer/476322031</a></li><li><a href="https://zhuanlan.zhihu.com/p/47968720">https://zhuanlan.zhihu.com/p/47968720</a></li><li><a href="http://www.zhihu.com/question/38737972">http://www.zhihu.com/question/38737972</a></li><li><a href="https://github.com/leisurelicht/wtfpython-cn">https://github.com/leisurelicht/wtfpython-cn</a></li><li><a href="https://github.com/Snailclimb/JavaGuide">https://github.com/Snailclimb/JavaGuide</a></li><li><a href="http://www.zjgyzk.cn/fazhanguihua/11hunan.html">http://www.zjgyzk.cn/fazhanguihua/11hunan.html</a></li><li><a href="http://www.zjgyzk.cn/index.html">http://www.zjgyzk.cn/index.html</a></li><li><a href="https://www.wuxiareview.com/">https://www.wuxiareview.com/</a></li></ol><p><a href="https://tech.meituan.com/page/2.html">https://tech.meituan.com/page/2.html</a></p><p><a href="https://gfm.docschina.org/zh-hans/">https://gfm.docschina.org/zh-hans/</a></p><p><a href="https://markdown-it.docschina.org/#%E5%AE%89%E8%A3%85">https://markdown-it.docschina.org/#安装</a></p><p><a href="https://juejin.cn/post/6844903834041450510">https://juejin.cn/post/6844903834041450510</a></p><p><a href="https://juejin.cn/post/6844903921555603470">https://juejin.cn/post/6844903921555603470</a></p><p><a href="https://github.com/HarryChen0506/react-markdown-editor-lite/blob/master/README_CN.md">https://github.com/HarryChen0506/react-markdown-editor-lite/blob/master/README_CN.md</a></p><p><a href="https://github.com/accforgit/blog-data/blob/master/%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91%E5%99%A8/README/README1.md">https://github.com/accforgit/blog-data/blob/master/在线编辑器/README/README1.md</a></p><p><a href="https://juejin.cn/post/6844903782799638541">https://juejin.cn/post/6844903782799638541</a></p><p><a href="https://www.zhihu.com/question/21405835">https://www.zhihu.com/question/21405835</a></p><p><a href="https://www.zhihu.com/question/446988424">https://www.zhihu.com/question/446988424</a></p><p><a href="https://www.zhihu.com/question/270998611">https://www.zhihu.com/question/270998611</a></p><p><a href="https://www.zhihu.com/question/19934502?utm_source=com.candykk.android.messaging&utm_medium=social&utm_oi=54091971559424">https://www.zhihu.com/question/19934502?utm_source&#x3D;com.candykk.android.messaging&amp;utm_medium&#x3D;social&amp;utm_oi&#x3D;54091971559424</a></p><p><a href="https://refactoringguru.cn/">https://refactoringguru.cn</a></p><p><a href="https://www.xiaominfo.com/2019/05/20/springfox-0/">https://www.xiaominfo.com/2019/05/20/springfox-0/</a></p><p><a href="https://juejin.cn/post/6844903896637259784">https://juejin.cn/post/6844903896637259784</a></p><p><a href="https://juejin.cn/post/6956105880966758407">https://juejin.cn/post/6956105880966758407</a></p><p><a href="https://juejin.cn/post/6951649464637636622">https://juejin.cn/post/6951649464637636622</a></p><p><a href="https://juejin.cn/post/6911897255087702030">https://juejin.cn/post/6911897255087702030</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzU3MDAyNDgwNA==&mid=2247490266&idx=1&sn=365c29f393e7400f966e9fa6030d5fea&utm_source=tuicool&utm_medium=referral">https://mp.weixin.qq.com/s?__biz&#x3D;MzU3MDAyNDgwNA&#x3D;&#x3D;&amp;mid&#x3D;2247490266&amp;idx&#x3D;1&amp;sn&#x3D;365c29f393e7400f966e9fa6030d5fea&amp;utm_source&#x3D;tuicool&amp;utm_medium&#x3D;referral</a></p><p><a href="http://bboyjing.github.io/page/30/">http://bboyjing.github.io/page/30/</a></p><p><a href="https://www.tuicool.com/articles/mYj2YfA">https://www.tuicool.com/articles/mYj2YfA</a></p><p><a href="https://www.tuicool.com/articles/aYfeMfJ">https://www.tuicool.com/articles/aYfeMfJ</a></p><p><a href="https://www.tuicool.com/articles/AZRnUzJ">https://www.tuicool.com/articles/AZRnUzJ</a></p><p><a href="https://www.tuicool.com/articles/36VrAfV">https://www.tuicool.com/articles/36VrAfV</a></p><p><a href="https://www.tuicool.com/articles/reAjmaj">https://www.tuicool.com/articles/reAjmaj</a></p><p><a href="https://www.tuicool.com/articles/yEzQ3qb">https://www.tuicool.com/articles/yEzQ3qb</a></p><p><a href="https://www.tuicool.com/articles/AFRjAvz">https://www.tuicool.com/articles/AFRjAvz</a></p><p><a href="https://www.tuicool.com/articles/aiy2A3R">https://www.tuicool.com/articles/aiy2A3R</a></p><p><a href="https://www.tuicool.com/articles/N3Q3QvA">https://www.tuicool.com/articles/N3Q3QvA</a></p><p><a href="https://segmentfault.com/a/1190000023554495?utm_source=sf-similar-article">https://segmentfault.com/a/1190000023554495?utm_source&#x3D;sf-similar-article</a></p><p><a href="https://segmentfault.com/a/1190000022108025">https://segmentfault.com/a/1190000022108025</a></p><p><a href="https://www.tuicool.com/articles/amaqeia">https://www.tuicool.com/articles/amaqeia</a></p><p><a href="https://www.tuicool.com/articles/32MVJfb">https://www.tuicool.com/articles/32MVJfb</a></p><p><a href="https://www.tuicool.com/articles/Yjiym2J">https://www.tuicool.com/articles/Yjiym2J</a></p><p><a href="https://www.tuicool.com/articles/ArAVbyv">https://www.tuicool.com/articles/ArAVbyv</a></p><p><a href="https://www.tuicool.com/articles/qauMBfy">https://www.tuicool.com/articles/qauMBfy</a></p><p><a href="https://www.tuicool.com/articles/QBVVRzA">https://www.tuicool.com/articles/QBVVRzA</a></p><p><a href="https://zhuanlan.zhihu.com/p/166224327">https://zhuanlan.zhihu.com/p/166224327</a></p><p><a href="https://www.cnblogs.com/JIATCODE/p/13398819.html">https://www.cnblogs.com/JIATCODE/p/13398819.html</a></p><p><a href="https://www.tuicool.com/articles/UBV73uI">https://www.tuicool.com/articles/UBV73uI</a></p><p><a href="https://segmentfault.com/a/1190000023392288">https://segmentfault.com/a/1190000023392288</a></p><p><a href="https://www.tuicool.com/articles/YbMFJze">https://www.tuicool.com/articles/YbMFJze</a></p><p><a href="https://www.tuicool.com/articles/226VVnQ">https://www.tuicool.com/articles/226VVnQ</a></p><p><a href="https://www.tuicool.com/articles/2eyq2uz">https://www.tuicool.com/articles/2eyq2uz</a></p><p><a href="https://www.tuicool.com/articles/YFnQbaf">https://www.tuicool.com/articles/YFnQbaf</a></p><p><a href="https://www.tuicool.com/articles/yQnaU3i">https://www.tuicool.com/articles/yQnaU3i</a></p><p><a href="https://www.tuicool.com/articles/2yuYfm7">https://www.tuicool.com/articles/2yuYfm7</a></p><p><a href="https://www.tuicool.com/articles/a22eyyv">https://www.tuicool.com/articles/a22eyyv</a></p><p><a href="https://www.tuicool.com/articles/Iby2em6">https://www.tuicool.com/articles/Iby2em6</a></p><p><a href="https://www.tuicool.com/articles/MbEJBfQ">https://www.tuicool.com/articles/MbEJBfQ</a></p><p><a href="https://www.tuicool.com/articles/BzqMNjn">https://www.tuicool.com/articles/BzqMNjn</a></p><p><a href="https://www.tuicool.com/articles/iUzEva3">https://www.tuicool.com/articles/iUzEva3</a></p><p><a href="https://www.tuicool.com/articles/uiUzieQ">https://www.tuicool.com/articles/uiUzieQ</a></p><p><a href="https://www.tuicool.com/articles/jaMbuaU">https://www.tuicool.com/articles/jaMbuaU</a></p><p><a href="https://www.tuicool.com/articles/6r677nN">https://www.tuicool.com/articles/6r677nN</a></p><p><a href="https://www.tuicool.com/articles/ZN3INfr">https://www.tuicool.com/articles/ZN3INfr</a></p><p><a href="https://www.tuicool.com/articles/q2eAZnR">https://www.tuicool.com/articles/q2eAZnR</a></p><p><a href="https://www.tuicool.com/articles/vyIZbmM">https://www.tuicool.com/articles/vyIZbmM</a></p><p><a href="https://www.tuicool.com/articles/fMv2Qfz">https://www.tuicool.com/articles/fMv2Qfz</a></p><p><a href="https://juejin.cn/post/6844903952643784711">https://juejin.cn/post/6844903952643784711</a> spring security</p><p><a href="https://pandolia.net/tinyc/ch1_overview.html">https://pandolia.net/tinyc/ch1_overview.html</a></p><p>vu3+ts+vite <a href="https://juejin.cn/post/7028021332713570318">https://juejin.cn/post/7028021332713570318</a><br>vue3 <a href="https://juejin.cn/post/6951649464637636622#heading-48">https://juejin.cn/post/6951649464637636622#heading-48</a></p><p><a href="https://segmentfault.com/a/1190000040896170">https://segmentfault.com/a/1190000040896170</a></p><p>gateway</p><ol><li><a href="https://juejin.cn/post/7011784536472158222">https://juejin.cn/post/7011784536472158222</a></li><li><a href="https://juejin.cn/user/501033033545053/posts">https://juejin.cn/user/501033033545053/posts</a></li><li><a href="https://juejin.cn/post/7015477481461252109">https://juejin.cn/post/7015477481461252109</a></li><li><a href="https://juejin.cn/column/6960603866748420133">https://juejin.cn/column/6960603866748420133</a></li><li><a href="https://juejin.cn/post/7012605979317501988">https://juejin.cn/post/7012605979317501988</a></li><li><a href="https://juejin.cn/post/7012222602840129544">https://juejin.cn/post/7012222602840129544</a></li><li><a href="https://juejin.cn/post/7011418596807016484">https://juejin.cn/post/7011418596807016484</a></li></ol><p><a href="https://www.cnblogs.com/eyesfree/p/15212717.html">https://www.cnblogs.com/eyesfree/p/15212717.html</a>  </p><p>分布式事务<br>1<a href="https://www.cnblogs.com/qdhxhz/p/11191399.html">https://www.cnblogs.com/qdhxhz/p/11191399.html</a><br>2<a href="https://www.jianshu.com/p/286cac4625b6">https://www.jianshu.com/p/286cac4625b6</a><br>gateway: body 修改<br>1<a href="https://cloud.tencent.com/developer/article/1704177">https://cloud.tencent.com/developer/article/1704177</a><br>2<a href="https://www.zhangshengrong.com/p/P71MoPDZNd/">https://www.zhangshengrong.com/p/P71MoPDZNd/</a></p><p><a href="https://xinchen.blog.csdn.net/article/details/120096926">https://xinchen.blog.csdn.net/article/details/120096926</a></p><p><a href="https://segmentfault.com/a/1190000017898354">https://segmentfault.com/a/1190000017898354</a></p><p><a href="https://github.com/zq2599/blog_demos">https://github.com/zq2599/blog_demos</a></p><p><a href="https://github.com/it-wwh/spring-cloud-gateway-oauth2">https://github.com/it-wwh/spring-cloud-gateway-oauth2</a></p><p><a href="https://segmentfault.com/a/1190000040574542">https://segmentfault.com/a/1190000040574542</a></p><p><a href="https://zyue.wiki/archive">https://zyue.wiki/archive</a></p><p><a href="https://zhuanlan.zhihu.com/p/147513356">https://zhuanlan.zhihu.com/p/147513356</a></p><p><a href="https://www.cnblogs.com/cjsblog/p/10548022.html">https://www.cnblogs.com/cjsblog/p/10548022.html</a></p><p><a href="https://www.cnblogs.com/xifengxiaoma/p/10043173.html">https://www.cnblogs.com/xifengxiaoma/p/10043173.html</a></p><p><a href="https://juejin.cn/post/7004716677300486174">https://juejin.cn/post/7004716677300486174</a></p><p><a href="https://juejin.cn/post/6995474299167440932">https://juejin.cn/post/6995474299167440932</a></p><p><a href="https://github.com/mushang8923/sso-jwt">https://github.com/mushang8923/sso-jwt</a></p><p><a href="https://github.com/MoienTajik/AspNetCore-Developer-Roadmap/blob/master/ReadMe.zh-Hans.md">https://github.com/MoienTajik/AspNetCore-Developer-Roadmap/blob/master/ReadMe.zh-Hans.md</a></p><p><a href="https://github.com/DXY-F2E/api-mocker">https://github.com/DXY-F2E/api-mocker</a></p><p><a href="https://github.com/brookshi/Hitchhiker">https://github.com/brookshi/Hitchhiker</a></p><p><a href="https://github.com/wso2/product-apim">https://github.com/wso2/product-apim</a></p><p><a href="https://github.com/0voice/backend_video">https://github.com/0voice/backend_video</a></p><p><a href="https://github.com/kilimchoi/engineering-blogs">https://github.com/kilimchoi/engineering-blogs</a></p><p><a href="https://github.com/timqian/chinese-independent-blogs">https://github.com/timqian/chinese-independent-blogs</a></p><p><a href="https://ohmyrss.com/#">https://ohmyrss.com/#</a></p><p><a href="https://blog.csdn.net/hancoder/article/details/120213532">https://blog.csdn.net/hancoder/article/details/120213532</a></p><p><a href="https://www.douban.com/people/RednaxelaFX/?_i=23134841yI63Ru,45891971yI63Ru">https://www.douban.com/people/RednaxelaFX/?_i&#x3D;23134841yI63Ru,45891971yI63Ru</a></p><p><a href="https://zhuanlan.zhihu.com/p/25042028">https://zhuanlan.zhihu.com/p/25042028</a></p><p><a href="https://www.iteye.com/blog/user/rednaxelafx">https://www.iteye.com/blog/user/rednaxelafx</a></p><p><a href="https://hllvm-group.iteye.com/">https://hllvm-group.iteye.com</a></p><p><a href="https://github.com/hao-lh/books-making-you-better">https://github.com/hao-lh/books-making-you-better</a></p><p><a href="https://github.com/StevenBaby/computer">https://github.com/StevenBaby/computer</a></p><p><a href="https://github.com/izackwu/TeachYourselfCS-CN/blob/master/TeachYourselfCS-CN.md">https://github.com/izackwu/TeachYourselfCS-CN/blob/master/TeachYourselfCS-CN.md</a></p><p><a href="https://www.pdai.tech/md/outline/x-outline.html#java%E8%BF%9B%E9%98%B6---%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6">https://www.pdai.tech/md/outline/x-outline.html#java%E8%BF%9B%E9%98%B6---%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6</a></p><p><a href="https://zh.javascript.info/">https://zh.javascript.info/</a></p><p><a href="https://www.v2ex.com/t/827771#reply11">https://www.v2ex.com/t/827771#reply11</a></p><p><a href="https://github.com/BottegaIT/ddd-leaven-v2">https://github.com/BottegaIT/ddd-leaven-v2</a></p><p><a href="https://github.com/Kotlin/KEEP">https://github.com/Kotlin/KEEP</a><br><a href="https://github.com/Kotlin/KEEP/blob/master/proposals/coroutines.md">https://github.com/Kotlin/KEEP/blob/master/proposals/coroutines.md</a><br><a href="https://github.com/akullpp/awesome-java">https://github.com/akullpp/awesome-java</a><br><a href="https://github.com/Solido/awesome-flutter">https://github.com/Solido/awesome-flutter</a><br><a href="https://book.flutterchina.club/">https://book.flutterchina.club/</a><br><a href="https://juejin.cn/post/6844903917583597581">https://juejin.cn/post/6844903917583597581</a><br><a href="https://zhuanlan.zhihu.com/p/391591909">https://zhuanlan.zhihu.com/p/391591909</a><br><a href="https://segmentfault.com/a/1190000038254246">https://segmentfault.com/a/1190000038254246</a><br><a href="https://zhuanlan.zhihu.com/p/424975348">https://zhuanlan.zhihu.com/p/424975348</a></p><p><a href="https://github.com/dongzhonghua/Collie">https://github.com/dongzhonghua/Collie</a></p><p><a href="https://segmentfault.com/a/1190000021408264">https://segmentfault.com/a/1190000021408264</a><br><a href="https://goframe.org/pages/viewpage.action?pageId=38575612">https://goframe.org/pages/viewpage.action?pageId=38575612</a><br><a href="https://github.com/CoderLeixiaoshuai/java-eight-part/blob/master/docs/distributed/%E5%8E%9F%E6%9D%A510%E5%BC%A0%E5%9B%BE%E5%B0%B1%E5%8F%AF%E4%BB%A5%E6%90%9E%E6%87%82%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86.md">https://github.com/CoderLeixiaoshuai/java-eight-part/blob/master/docs/distributed/%E5%8E%9F%E6%9D%A510%E5%BC%A0%E5%9B%BE%E5%B0%B1%E5%8F%AF%E4%BB%A5%E6%90%9E%E6%87%82%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86.md</a><br><a href="https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA%E5%AE%9E%E6%88%98-%E5%AE%8C/17%20%20%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA%EF%BC%9AZipkin%20%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%88%86%E5%B8%83%E5%BC%8F%E8%BF%BD%E8%B8%AA%EF%BC%9F.md">https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA%E5%AE%9E%E6%88%98-%E5%AE%8C/17%20%20%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA%EF%BC%9AZipkin%20%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%88%86%E5%B8%83%E5%BC%8F%E8%BF%BD%E8%B8%AA%EF%BC%9F.md</a></p><p><strong>稍后阅读</strong></p><p><a href="https://alternativeto.net/">https://alternativeto.net/</a> 竟品网盘分析</p><ol><li><a href="https://www.zhihu.com/answer/1844956560">https://www.zhihu.com/answer/1844956560</a></li><li><a href="https://www.zhihu.com/question/21405835">https://www.zhihu.com/question/21405835</a></li><li><a href="https://www.zhihu.com/question/446988424">https://www.zhihu.com/question/446988424</a></li><li><a href="https://www.zhihu.com/question/270998611">https://www.zhihu.com/question/270998611</a></li><li><a href="http://www.zhihu.com/question/19934502?utm_source=com.candykk.android.messaging&utm_medium=social&utm_oi=54091971559424">http://www.zhihu.com/question/19934502?utm_source&#x3D;com.candykk.android.messaging&amp;utm_medium&#x3D;social&amp;utm_oi&#x3D;54091971559424</a></li><li><a href="https://www.zhihu.com/question/20803763">https://www.zhihu.com/question/20803763</a></li><li><a href="https://gudaoxuri.gitbook.io/microservices-architecture/">https://gudaoxuri.gitbook.io/microservices-architecture/</a></li><li><a href="https://www.zhihu.com/question/51174287/answer/168169191">https://www.zhihu.com/question/51174287/answer/168169191</a></li><li><a href="https://www.zhihu.com/question/20803763">https://www.zhihu.com/question/20803763</a></li><li><a href="https://www.zhihu.com/question/35852265">https://www.zhihu.com/question/35852265</a></li><li><a href="https://www.zhihu.com/question/61539640">https://www.zhihu.com/question/61539640</a></li><li><a href="http://www.cnblogs.com/ToDoToTry/archive/2009/06/21/1507760.html">http://www.cnblogs.com/ToDoToTry/archive/2009/06/21/1507760.html</a></li><li><a href="http://blog.a0z.me/2016/04/28/how-to-read-open-project">http://blog.a0z.me/2016/04/28/how-to-read-open-project</a></li><li><a href="https://github.com/Sayi/sayi.github.com/issues">https://github.com/Sayi/sayi.github.com/issues</a></li><li><a href="https://www.zhihu.com/question/281940376/answer/476322031">https://www.zhihu.com/question/281940376/answer/476322031</a></li><li><a href="https://zhuanlan.zhihu.com/p/47968720">https://zhuanlan.zhihu.com/p/47968720</a></li><li><a href="http://www.zhihu.com/question/38737972">http://www.zhihu.com/question/38737972</a></li><li><a href="https://github.com/leisurelicht/wtfpython-cn">https://github.com/leisurelicht/wtfpython-cn</a></li><li><a href="https://github.com/Snailclimb/JavaGuide">https://github.com/Snailclimb/JavaGuide</a></li><li><a href="http://www.zjgyzk.cn/fazhanguihua/11hunan.html">http://www.zjgyzk.cn/fazhanguihua/11hunan.html</a></li><li><a href="http://www.zjgyzk.cn/index.html">http://www.zjgyzk.cn/index.html</a></li><li><a href="https://www.wuxiareview.com/">https://www.wuxiareview.com/</a></li></ol><p><a href="https://tech.meituan.com/page/2.html">https://tech.meituan.com/page/2.html</a></p><p><a href="https://gfm.docschina.org/zh-hans/">https://gfm.docschina.org/zh-hans/</a></p><p><a href="https://markdown-it.docschina.org/#%E5%AE%89%E8%A3%85">https://markdown-it.docschina.org/#安装</a></p><p><a href="https://juejin.cn/post/6844903834041450510">https://juejin.cn/post/6844903834041450510</a></p><p><a href="https://juejin.cn/post/6844903921555603470">https://juejin.cn/post/6844903921555603470</a></p><p><a href="https://github.com/HarryChen0506/react-markdown-editor-lite/blob/master/README_CN.md">https://github.com/HarryChen0506/react-markdown-editor-lite/blob/master/README_CN.md</a></p><p><a href="https://github.com/accforgit/blog-data/blob/master/%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91%E5%99%A8/README/README1.md">https://github.com/accforgit/blog-data/blob/master/在线编辑器/README/README1.md</a></p><p><a href="https://juejin.cn/post/6844903782799638541">https://juejin.cn/post/6844903782799638541</a></p><p><a href="https://www.zhihu.com/question/21405835">https://www.zhihu.com/question/21405835</a></p><p><a href="https://www.zhihu.com/question/446988424">https://www.zhihu.com/question/446988424</a></p><p><a href="https://www.zhihu.com/question/270998611">https://www.zhihu.com/question/270998611</a></p><p><a href="https://www.zhihu.com/question/19934502?utm_source=com.candykk.android.messaging&utm_medium=social&utm_oi=54091971559424">https://www.zhihu.com/question/19934502?utm_source&#x3D;com.candykk.android.messaging&amp;utm_medium&#x3D;social&amp;utm_oi&#x3D;54091971559424</a></p><p><a href="https://refactoringguru.cn/">https://refactoringguru.cn</a></p><p><a href="https://www.xiaominfo.com/2019/05/20/springfox-0/">https://www.xiaominfo.com/2019/05/20/springfox-0/</a></p><p><a href="https://juejin.cn/post/6844903896637259784">https://juejin.cn/post/6844903896637259784</a></p><p><a href="https://juejin.cn/post/6956105880966758407">https://juejin.cn/post/6956105880966758407</a></p><p><a href="https://juejin.cn/post/6951649464637636622">https://juejin.cn/post/6951649464637636622</a></p><p><a href="https://juejin.cn/post/6911897255087702030">https://juejin.cn/post/6911897255087702030</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzU3MDAyNDgwNA==&mid=2247490266&idx=1&sn=365c29f393e7400f966e9fa6030d5fea&utm_source=tuicool&utm_medium=referral">https://mp.weixin.qq.com/s?__biz&#x3D;MzU3MDAyNDgwNA&#x3D;&#x3D;&amp;mid&#x3D;2247490266&amp;idx&#x3D;1&amp;sn&#x3D;365c29f393e7400f966e9fa6030d5fea&amp;utm_source&#x3D;tuicool&amp;utm_medium&#x3D;referral</a></p><p><a href="http://bboyjing.github.io/page/30/">http://bboyjing.github.io/page/30/</a></p><p><a href="https://www.tuicool.com/articles/mYj2YfA">https://www.tuicool.com/articles/mYj2YfA</a></p><p><a href="https://www.tuicool.com/articles/aYfeMfJ">https://www.tuicool.com/articles/aYfeMfJ</a></p><p><a href="https://www.tuicool.com/articles/AZRnUzJ">https://www.tuicool.com/articles/AZRnUzJ</a></p><p><a href="https://www.tuicool.com/articles/36VrAfV">https://www.tuicool.com/articles/36VrAfV</a></p><p><a href="https://www.tuicool.com/articles/reAjmaj">https://www.tuicool.com/articles/reAjmaj</a></p><p><a href="https://www.tuicool.com/articles/yEzQ3qb">https://www.tuicool.com/articles/yEzQ3qb</a></p><p><a href="https://www.tuicool.com/articles/AFRjAvz">https://www.tuicool.com/articles/AFRjAvz</a></p><p><a href="https://www.tuicool.com/articles/aiy2A3R">https://www.tuicool.com/articles/aiy2A3R</a></p><p><a href="https://www.tuicool.com/articles/N3Q3QvA">https://www.tuicool.com/articles/N3Q3QvA</a></p><p><a href="https://segmentfault.com/a/1190000023554495?utm_source=sf-similar-article">https://segmentfault.com/a/1190000023554495?utm_source&#x3D;sf-similar-article</a></p><p><a href="https://segmentfault.com/a/1190000022108025">https://segmentfault.com/a/1190000022108025</a></p><p><a href="https://www.tuicool.com/articles/amaqeia">https://www.tuicool.com/articles/amaqeia</a></p><p><a href="https://www.tuicool.com/articles/32MVJfb">https://www.tuicool.com/articles/32MVJfb</a></p><p><a href="https://www.tuicool.com/articles/Yjiym2J">https://www.tuicool.com/articles/Yjiym2J</a></p><p><a href="https://www.tuicool.com/articles/ArAVbyv">https://www.tuicool.com/articles/ArAVbyv</a></p><p><a href="https://www.tuicool.com/articles/qauMBfy">https://www.tuicool.com/articles/qauMBfy</a></p><p><a href="https://www.tuicool.com/articles/QBVVRzA">https://www.tuicool.com/articles/QBVVRzA</a></p><p><a href="https://zhuanlan.zhihu.com/p/166224327">https://zhuanlan.zhihu.com/p/166224327</a></p><p><a href="https://www.cnblogs.com/JIATCODE/p/13398819.html">https://www.cnblogs.com/JIATCODE/p/13398819.html</a></p><p><a href="https://www.tuicool.com/articles/UBV73uI">https://www.tuicool.com/articles/UBV73uI</a></p><p><a href="https://segmentfault.com/a/1190000023392288">https://segmentfault.com/a/1190000023392288</a></p><p><a href="https://www.tuicool.com/articles/YbMFJze">https://www.tuicool.com/articles/YbMFJze</a></p><p><a href="https://www.tuicool.com/articles/226VVnQ">https://www.tuicool.com/articles/226VVnQ</a></p><p><a href="https://www.tuicool.com/articles/2eyq2uz">https://www.tuicool.com/articles/2eyq2uz</a></p><p><a href="https://www.tuicool.com/articles/YFnQbaf">https://www.tuicool.com/articles/YFnQbaf</a></p><p><a href="https://www.tuicool.com/articles/yQnaU3i">https://www.tuicool.com/articles/yQnaU3i</a></p><p><a href="https://www.tuicool.com/articles/2yuYfm7">https://www.tuicool.com/articles/2yuYfm7</a></p><p><a href="https://www.tuicool.com/articles/a22eyyv">https://www.tuicool.com/articles/a22eyyv</a></p><p><a href="https://www.tuicool.com/articles/Iby2em6">https://www.tuicool.com/articles/Iby2em6</a></p><p><a href="https://www.tuicool.com/articles/MbEJBfQ">https://www.tuicool.com/articles/MbEJBfQ</a></p><p><a href="https://www.tuicool.com/articles/BzqMNjn">https://www.tuicool.com/articles/BzqMNjn</a></p><p><a href="https://www.tuicool.com/articles/iUzEva3">https://www.tuicool.com/articles/iUzEva3</a></p><p><a href="https://www.tuicool.com/articles/uiUzieQ">https://www.tuicool.com/articles/uiUzieQ</a></p><p><a href="https://www.tuicool.com/articles/jaMbuaU">https://www.tuicool.com/articles/jaMbuaU</a></p><p><a href="https://www.tuicool.com/articles/6r677nN">https://www.tuicool.com/articles/6r677nN</a></p><p><a href="https://www.tuicool.com/articles/ZN3INfr">https://www.tuicool.com/articles/ZN3INfr</a></p><p><a href="https://www.tuicool.com/articles/q2eAZnR">https://www.tuicool.com/articles/q2eAZnR</a></p><p><a href="https://www.tuicool.com/articles/vyIZbmM">https://www.tuicool.com/articles/vyIZbmM</a></p><p><a href="https://www.tuicool.com/articles/fMv2Qfz">https://www.tuicool.com/articles/fMv2Qfz</a></p>]]></content>
    
    
    <categories>
      
      <category>稍后阅读</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>架构</title>
    <link href="/posts/2408095164/"/>
    <url>/posts/2408095164/</url>
    
    <content type="html"><![CDATA[<h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>高并发大流量</li><li>高可用</li><li>海量数据存储</li><li>用户分布广泛，网络情况复杂</li><li>安全环境恶劣</li><li>需求变化快，发布频繁</li></ul><h2 id="能力提升途径"><a href="#能力提升途径" class="headerlink" title="能力提升途径"></a>能力提升途径</h2><ul><li>垂直伸缩</li><li>水平伸缩</li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>架构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>架构、设计、风格、模式解释</title>
    <link href="/posts/226486905/"/>
    <url>/posts/226486905/</url>
    
    <content type="html"><![CDATA[<h1 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h1><ul><li>架构：架构专注于可以被多个设计所利用的抽象</li><li>设计：设计是建立特定事务的具体计划。架构也是一种设计，专注于架构设计。</li><li>风格：某一特定应用领域中系统组织方式的惯用模式。</li><li>模式：指事物的标准样式，是结构主义用语。指用来说明事物结构的主观理性形式</li></ul><h2 id="概念剖析"><a href="#概念剖析" class="headerlink" title="概念剖析"></a>概念剖析</h2><ul><li>风格是模式的一种抽象</li><li>架构是设计的一种抽象<blockquote><p>架构风格师一种顶级抽象。其次是架构模式，设计模式时最底层实现落地层面的。</p></blockquote></li><li>架构风格是最高抽象级别的应用设计</li><li>架构模式是实现架构风格的一种方式</li><li>设计风格是设计中的某些风格，架构风格就是专注于架构设计的风格</li><li>架构设计是专注于架构的设计</li><li>设计模式是解决局部问题的方法<img src="/posts/226486905/images/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E9%A3%8E%E6%A0%BC%E6%A8%A1%E5%BC%8F%E8%A7%A3%E9%87%8A.png" alt=""></li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>架构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Redis</title>
    <link href="/posts/3135569691/"/>
    <url>/posts/3135569691/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><ol><li>string<br>最基本的类型。是 key 对应的一个单一值。二进制安全，不比担心由于编码等问题导致二进制数据变化。可以包含任何数据，一个字符串值的最大容量为 512 M</li><li>list<br>字符串列表，按照插入顺序排序。可以添加一个元素到列表的头部或尾部。底层基于列表实现，所以操作头尾效率高，中间效率低</li><li>set<br>是 string 类型的无序集合，基于哈希表实现</li><li>zset<br>和 set 一样也是 string 类型元素的集合，切不允许重复的成员。不同的是每个元素会关联一个 double 类型的分数。redis 通过分数来为集合中的成员进行从小到大的排序。zset 的成员是唯一的，但是分数却可以重复</li><li>hash<br>本身是一个键值对的几个。可以当作 java 中 Map&lt;String, Object&gt; 对待</li></ol><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><h4 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h4><p>每个一段时间把内存中的数据作为一个快照保存到硬盘上的文件中。Redis默认开启RDB</p><h4 id="触发方式"><a href="#触发方式" class="headerlink" title="触发方式"></a>触发方式</h4><ol><li>基于默认配置<br>例：<br><code>save 900 1</code>：900秒内至少有一次修改则出发保存操作<br><code>save 300 10</code>：300 秒内至少有10次修改则出发保存操作<br><code>save 60 10000</code>：60秒内至少有1000次修改则出发保存操作</li><li>使用保存命令<br><code>save</code>或<code>bgsave</code></li><li>使用 flushall 命令<br>这个也会产生 dump. rdb 文件，但是里面是空的，没有意义</li><li>服务器关闭<br>如果执行 <code>shutdown</code> 命令让 Redis 正常退出，那么此前Redis就会执行一次持久化保存</li></ol><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><h4 id="机制-1"><a href="#机制-1" class="headerlink" title="机制"></a>机制</h4><p>根据配置文件中制定的策略，把生成数据的命令保存到硬盘上的文件中。</p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>数据库</category>
      
      <category>Redis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>软件架构编年史</title>
    <link href="/posts/263832673/"/>
    <url>/posts/263832673/</url>
    
    <content type="html"><![CDATA[<h1 id="软件架构编年史"><a href="#软件架构编年史" class="headerlink" title="软件架构编年史"></a>软件架构编年史</h1><h2 id="软件架构编年史系列"><a href="#软件架构编年史系列" class="headerlink" title="软件架构编年史系列"></a>软件架构编年史系列</h2><ul><li><a href="https://www.jianshu.com/p/b477b2cc6cfa">软件架构编年史(译)</a> &#x2F;&#x2F;<a href="https://links.jianshu.com/go?to=https://herbertograca.com/2017/07/03/the-software-architecture-chronicles/">原文</a></li><li><a href="https://www.jianshu.com/p/df295f92fb52">软件架构预述(译)</a> &#x2F;&#x2F;<a href="https://links.jianshu.com/go?to=https://herbertograca.com/2017/07/05/software-architecture-premises/">原文</a></li><li><a href="https://www.jianshu.com/p/2c4b7f86e5d4">编程语言的演化(译)</a> &#x2F;&#x2F;<a href="https://links.jianshu.com/go?to=https://herbertograca.com/2017/07/10/programming-language-evolution/">原文</a></li><li><a href="https://www.jianshu.com/p/d8dce27f279f">架构风格 vs. 架构模式 vs. 设计模式(译)</a> &#x2F;&#x2F;<a href="https://links.jianshu.com/go?to=https://herbertograca.com/2017/07/28/architectural-styles-vs-architectural-patterns-vs-design-patterns/">原文</a></li><li><a href="https://www.jianshu.com/p/28c3439c11d3">单体架构(译)</a> &#x2F;&#x2F;<a href="https://links.jianshu.com/go?to=https://herbertograca.com/2017/07/31/monolithic-architecture/">原文</a></li><li><a href="https://www.jianshu.com/p/e9fdc85d573c">分层架构(译)</a> &#x2F;&#x2F;<a href="https://links.jianshu.com/go?to=https://herbertograca.com/2017/08/03/layered-architecture/">原文</a></li><li><a href="https://www.jianshu.com/p/21079ff15a1c">MVC 及其变种(译)</a> &#x2F;&#x2F;<a href="https://links.jianshu.com/go?to=https://herbertograca.com/2017/08/17/mvc-and-its-variants/">原文</a><ul><li><a href="https://www.jianshu.com/p/21079ff15a1c">1979 – Model-View-Controller(译)</a> &#x2F;&#x2F;<a href="https://links.jianshu.com/go?to=https://herbertograca.com/2017/08/17/mvc-and-its-variants/%23model-view-controller">原文</a></li><li><a href="https://www.jianshu.com/p/21079ff15a1c">1987&#x2F;2000 – PAC &#x2F; Hierarchical Model-View-Controller(译)</a> &#x2F;&#x2F;<a href="https://links.jianshu.com/go?to=https://herbertograca.com/2017/08/17/mvc-and-its-variants/%23hierarchical-model-view-controller">原文</a></li><li><a href="https://www.jianshu.com/p/21079ff15a1c">1996 – Model-View-Presenter(译)</a> &#x2F;&#x2F;<a href="https://links.jianshu.com/go?to=https://herbertograca.com/2017/08/17/mvc-and-its-variants/%23model-view-presenter">原文</a></li><li><a href="https://www.jianshu.com/p/bd2967d9391f">1998 –”Model 1″ &amp; “Model 2” (译)</a> &#x2F;&#x2F;<a href="https://links.jianshu.com/go?to=https://herbertograca.com/2018/08/29/model-1-model-2">原文</a></li><li><a href="https://www.jianshu.com/p/21079ff15a1c">2005 – Model-View-ViewModel(译)</a> &#x2F;&#x2F;<a href="https://links.jianshu.com/go?to=https://herbertograca.com/2017/08/17/mvc-and-its-variants/%23model-view-view_model">原文</a></li><li><a href="https://www.jianshu.com/p/21079ff15a1c">???? – Model-View-Presenter-ViewModel(译)</a> &#x2F;&#x2F;<a href="https://links.jianshu.com/go?to=https://herbertograca.com/2017/08/17/mvc-and-its-variants/%23model-view-presenter-view_model">原文</a></li><li><a href="https://www.jianshu.com/p/87405a5afb60">2008 – Resource-Method-Representation(译)</a> &#x2F;&#x2F;<a href="https://links.jianshu.com/go?to=https://herbertograca.com/2018/08/31/resource-method-representation">原文</a></li><li><a href="https://www.jianshu.com/p/2eaa134a9fb8">2014 – Action-Domain-Responder(译)</a> &#x2F;&#x2F;<a href="https://links.jianshu.com/go?to=https://herbertograca.com/2018/09/03/action-domain-responder">原文</a></li></ul></li><li><a href="https://www.jianshu.com/p/395814410cf5">EBI 架构(译)</a> &#x2F;&#x2F;<a href="https://links.jianshu.com/go?to=https://herbertograca.com/2017/08/24/ebi-architecture/">原文</a></li><li><a href="https://www.jianshu.com/p/ebaa2e11d25e">包与命名空间(译)</a> &#x2F;&#x2F;<a href="https://links.jianshu.com/go?to=https://herbertograca.com/2017/08/31/packaging-code/">原文</a></li><li><a href="https://www.jianshu.com/p/812636d55677">领域驱动设计(译)</a> &#x2F;&#x2F;<a href="https://links.jianshu.com/go?to=https://herbertograca.com/2017/09/07/domain-driven-design/">原文</a></li><li><a href="https://www.jianshu.com/p/f39f4537857e">端口和适配器架构(六边形架构)(译)</a> &#x2F;&#x2F;<a href="https://links.jianshu.com/go?to=https://herbertograca.com/2017/09/14/ports-adapters-architecture/">原文</a></li><li><a href="https://www.jianshu.com/p/d87d5389c92a">洋葱架构(译)</a> &#x2F;&#x2F;<a href="https://links.jianshu.com/go?to=https://herbertograca.com/2017/09/21/onion-architecture/">原文</a></li><li><a href="https://www.jianshu.com/p/b565f0c00c0c">整洁架构(译)</a> &#x2F;&#x2F;<a href="https://links.jianshu.com/go?to=https://herbertograca.com/2017/09/28/clean-architecture-standing-on-the-shoulders-of-giants/">原文</a></li><li><a href="https://www.jianshu.com/p/12dc9a4b3e35">事件驱动的架构(译)</a> &#x2F;&#x2F;<a href="https://links.jianshu.com/go?to=https://herbertograca.com/2017/10/05/event-driven-architecture/">原文</a></li><li><a href="https://www.jianshu.com/p/ab3843093903">从 CQS 到 CQRS(译)</a> &#x2F;&#x2F;<a href="https://links.jianshu.com/go?to=https://herbertograca.com/2017/10/19/from-cqs-to-cqrs/">原文</a></li><li><a href="https://www.jianshu.com/p/0c1354b3341f">面向服务的架构(SOA)(译)</a> &#x2F;&#x2F;<a href="https://links.jianshu.com/go?to=https://herbertograca.com/2017/11/09/service-oriented-architecture-soa/">原文</a></li><li><a href="https://www.jianshu.com/p/d3e8b9ac097b">清晰架构(01)：融合 DDD、洋葱架构、整洁架构、CQRS…(译)</a> &#x2F;&#x2F;<a href="https://links.jianshu.com/go?to=https://herbertograca.com/2017/11/16/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/">原文</a></li><li><a href="https://www.jianshu.com/p/fcf5bb27a60b">清晰架构(02)：超越同心圆分层 (译)</a> &#x2F;&#x2F;<a href="https://links.jianshu.com/go?to=https://herbertograca.com/2018/07/07/more-than-concentric-layers/">原文</a></li><li><a href="https://www.jianshu.com/p/dd992f3fe370">清晰架构(03)：在代码中展现架构和领域 (译)</a> &#x2F;&#x2F;<a href="https://links.jianshu.com/go?to=https://herbertograca.com/2019/06/05/reflecting-architecture-and-domain-in-code/">原文</a></li><li><a href="https://www.jianshu.com/p/5f1d9500b8df">清晰架构(04)：用文档描述架构 (译)</a> &#x2F;&#x2F;<a href="https://links.jianshu.com/go?to=https://herbertograca.com/2019/08/12/documenting-software-architecture/">原文</a></li><li>一个项目的演进：从 MVP 到 P</li><li>4 + 1 架构视图模型</li><li>架构的质量属性</li></ul><h2 id="时间线"><a href="#时间线" class="headerlink" title="时间线"></a>时间线</h2><ul><li>20 世纪 50 年代<ul><li><strong>非结构化编程</strong></li><li>~1951 – <strong>汇编</strong></li></ul></li><li>20 世纪 60 年代<ul><li><strong>结构化编程</strong></li><li><strong>分层</strong>: 用户界面、业务逻辑数据存储都在<strong>一层</strong>。</li><li>~1958 – Algol</li></ul></li><li>20 世纪 70 年代<ul><li><strong>过程式&#x2F;函数式编程</strong></li><li>~1970 – Pascal</li><li>~1972 – C</li><li><a href="https://links.jianshu.com/go?to=http://heim.ifi.uio.no/~trygver/1979/mvc-2/1979-12-MVC.pdf">1979</a> – <strong><a href="/posts/2218208641/">MVC</a> 模式(Model-View-Controller)</strong></li></ul></li><li>20 世纪 80 年代<ul><li><strong>面向对象编程</strong> (但其思想在 <a href="https://links.jianshu.com/go?to=http://userpage.fu-berlin.de/~ram/pub/pub_jf47ht81Ht/doc_kay_oop_en">20 世纪 60 年代</a>晚期已经第一次提出)</li><li><strong>分层</strong>: <strong>两层</strong>，第一层是用户界面，第二层是业务逻辑和数据存储</li><li>~1980 – C++</li><li><strong>CORBA</strong> – 通用物件请求代理架构(尽管<a href="https://links.jianshu.com/go?to=https://en.wikipedia.org/wiki/Common_Object_Request_Broker_Architecture%23Versions_history">1991年</a>才推出第一个稳定版，但最早使用可以追溯到 <a href="https://links.jianshu.com/go?to=https://en.wikipedia.org/wiki/TIBCO_Software">20 世纪 80 年代</a>)</li><li>~1986 – Erlang</li><li>~1987 – Perl</li><li><a href="https://links.jianshu.com/go?to=https://www.lri.fr/~mbl/ENS/FONDIHM/2013/papers/Coutaz-Interact87.pdf">1987</a> – PAC 即 <strong>HMVC 模式(Hierarchical Model-View-Controller)</strong></li><li><a href="https://links.jianshu.com/go?to=https://drive.google.com/file/d/0BwhCYaYDn8EgNzAzZjA5ZmItNjU3NS00MzQ5LTkwYjMtMDJhNDU5ZTM0MTlh/view">1988</a> – <strong>LSP(里氏替换原则)</strong> (~SO<strong>L</strong>ID)</li></ul></li><li>20 世纪 90 年代<ul><li><strong>分层</strong>: <strong>三层</strong>，第一层是用户界面，第二层是业务逻辑(以及浏览器作为客户端时的用户界面展现逻辑)，第三层是数据存储</li><li>~1991 – <strong>消息总线</strong></li><li>~1991 – Python</li><li><a href="https://links.jianshu.com/go?to=https://www.amazon.com/Object-Oriented-Software-Engineering-Driven-Approach/dp/0201403471">1992</a> – <strong>EBI 架构</strong>(Entity-Boundary-Interactor) 即 EBC 或 EIC</li><li>~1993 – Ruby　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　</li><li>~1995 – Delphi, Java, Javascript, PHP</li><li><a href="https://links.jianshu.com/go?to=http://www.wildcrest.com/Potel/Portfolio/mvp.pdf">1996</a> – <strong>MVP 模式(Model-View-Presenter)</strong></li><li><a href="https://links.jianshu.com/go?to=http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod">1996</a> – <strong>OCP</strong>, <strong>ISP</strong>, <strong>DIP</strong> (~S<strong>O</strong>L<strong>ID</strong>), REP, CRP, CCP, ADP</li><li><a href="https://links.jianshu.com/go?to=http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod">1997</a> – SDP, SAP</li><li>~<a href="https://links.jianshu.com/go?to=http://www.cs.ubc.ca/~gregor/papers/kiczales-ECOOP1997-AOP.pdf">1997</a> – <strong>面向方面编程</strong></li><li>~1997 – Web 服务</li><li>~<a href="https://links.jianshu.com/go?to=http://shop.oreilly.com/product/9780596006754.do">1997</a> – <strong>ESB</strong> – 企业服务总线 (尽管创造该术语的书籍2004年才出版，但这个概念早已被使用)</li></ul></li><li>21 世纪 00 年代<ul><li><a href="http://a.co/7S3sJ2J">2002</a> – <strong>SRP</strong> (~<strong>S</strong>OLID)</li><li><a href="https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215">2003</a> – <strong><a href="/posts/1836512142/">领域驱动设计</a></strong></li><li><a href="https://learn.microsoft.com/zh-cn/archive/blogs/johngossman/introduction-to-modelviewviewmodel-pattern-for-building-wpf-apps">2005</a> – <strong>MVVM 模式(Model-View-ViewModel)</strong></li><li><a href="http://alistair.cockburn.us/Hexagonal+architecture">2005</a> – <strong>端口和适配器架构</strong>即六边形架构</li><li><a href="https://youtu.be/JHGkaShoyNs?t=1m17s">2006</a>? – <strong>CQRS 与 ES</strong> (命令查询职责分离与事件溯源)</li><li><a href="https://jeffreypalermo.com/2008/07/the-onion-architecture-part-1/">2008</a> – <strong>洋葱架构</strong></li><li><a href="https://medium.com/s-c-a-l-e/talking-microservices-with-the-man-who-made-netflix-s-cloud-famous-1032689afed3">2009</a> – <strong>微服务</strong>(Netflix)</li></ul></li><li>21 世纪 10 年代<ul><li><a href="https://www.amazon.co.uk/Lean-Architecture-Agile-Software-Development/dp/0470684208">2010</a> – <strong>DCI 架构</strong>(Data-Context-Interaction)</li><li><a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html">2012</a> – <strong>整洁架构</strong></li><li><a href="https://links.jianshu.com/go?to=http://www.codingthearchitecture.com/2014/08/24/c4_model_poster.html">2014</a> – C4 模型</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>架构</category>
      
      <category>软件架构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>cobra</title>
    <link href="/posts/387598377/"/>
    <url>/posts/387598377/</url>
    
    <content type="html"><![CDATA[<h1 id="cobra"><a href="#cobra" class="headerlink" title="cobra"></a>cobra</h1><p> <code>cobra</code> 是一个命令行程序库，可以用来编写命令行程序。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>支持子命令, 如 <code>app server</code>等</li><li>兼容POXIS选项</li><li>嵌套子命令</li><li>全局、本地层级选项，可以在多处设置选项，按照一定的顺序取用</li></ul><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>命令(Command)：就是需要执行的操作</li><li>参数(Arg)：命令的参数，即要操作的对象</li><li>选项(Flag)：命令选项可以调整命令的行为<br>例：<br><code>hugo server --port=1313</code><br>其中 <code>server</code> 是子命令，<code>--port</code> 是参数<br><code>git clone URL --bare</code><br>其中 <code>clone</code> 是子命令，<code>URL</code> 是参数，<code>--bare</code>是选项</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ccard">type: folder_brief_live<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>框架</category>
      
      <category>cobra</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DDD</title>
    <link href="/posts/1836512142/"/>
    <url>/posts/1836512142/</url>
    
    <content type="html"><![CDATA[<h1 id="DDD"><a href="#DDD" class="headerlink" title="DDD"></a>DDD</h1><h2 id="DDD-介绍"><a href="#DDD-介绍" class="headerlink" title="DDD 介绍"></a>DDD 介绍</h2><h3 id="DDD整体架构"><a href="#DDD整体架构" class="headerlink" title="DDD整体架构"></a>DDD整体架构</h3><img src="/posts/1836512142/images/DDD%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84.png" alt="">### DDD 分层架构<img src="/posts/1836512142/images/DDD%E6%9E%B6%E6%9E%84.png" alt="DDD分层架构">和 <a href="/posts/2218208641/">MVC</a> 三层架构的区别：1. controller 层更加纯粹，controller 可能会聚合多个 service 层调用。新的分层架构中，则纯粹作为与前端或外部系统交互的数据转换层，不再包含业务逻辑2. service 层改为 Application Services，主要体现在对 service 进行分级，打薄，Application Service 作为更高级别的抽象，新增领域层，抽离原 service 层的部分逻辑到领域服务和领域对象中。3. 领域层分为聚合和领域服务，其中聚合包括实体+值对象，实体和值对象不像 spring 提倡的贫血模型，仅包含 get、set 方法的简单对象，是包含了业务逻辑的丰富对象，即 DDD 所提倡的充血模型对象。<h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><ul><li>领域：切分的服务，就是范围。重点是边界， 核心思想就是将问题逐级细分来减低业务和系统的复杂度</li><li>子域：子服务。领域可以进一步划分成子领域。这里是处理高度复杂领域的设计思想，试图分离技术实现的复杂性。子域按重要程度被划分为三类： 核心域、通用域、支撑域</li><li>核心域：核心服务。</li><li>通用域：中间件服务或第三方服务。本身可以通过现有的解决方案即成来完成的服务。</li><li>支撑域：企业公共服务。没它不行，但又打不到核心的价值，围绕着产品内部所需要，但又不能单独变更为第三方服务，即它不是一个通用的服务。</li><li>统一语言（统一概念）：定义上下文的含义。价值是可以解决交流障碍，让每个团队使用统一语言（概念）来交流，甚至可读性更好的代码</li><li>限界上下文（服务职责划分的边界）：定义上下文的边界。领域模型存在边界之内。对于同一概念，不同上下文会有不同的理解。理论上，限界的边界就是微服务的边界。</li><li>聚合（包）：每个包里包含一类实体或者行为，有助于分散系统的复杂性，也是一种高层次的抽象，可以简化对领域模型的理解。<blockquote><p>拆分的实体不能都放在一个服务里，这就涉及到了拆分，有拆分就会有聚合。聚合是为了保证领域内对象之间的一致性问题。<br>在定义聚合的时候，应该遵守不变形约束法则：</p><ol><li>聚合边界内必须具有哪些信息，如果没有这些信息就不能称为一个有效的聚合</li><li>聚合内的某些对象的状态必须满足某个业务规则</li></ol></blockquote></li><li>聚合根（包）：一个上下文内可能包含多个聚合，每个聚合都有一个根实体，叫做聚合根，一个聚合只有一个聚合根</li><li>实体（Domain 或 Entity）：实体是具有身份和连贯性的领域概念，实体也是一个特殊的领域</li><li>值对象（Domain 或 Entity）：为了更好的展示领域模型之间的关系，制定的一个对象，本质上也是一种实体，但是相对实体而言，没有状态和身份标识，存在的目的就是为了表示一个值，通常使用值对象来传达数量的形式来表示</li></ul><h2 id="领域的四种模型"><a href="#领域的四种模型" class="headerlink" title="领域的四种模型"></a>领域的四种模型</h2><ol><li><a href="/posts/2876246174/">失血模型</a></li><li><a href="/posts/2879773850/">贫血模型</a></li><li><a href="/posts/2373614283/">充血模型</a></li><li><a href="/posts/491354674/">胀血模型</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>架构</category>
      
      <category>软件架构</category>
      
      <category>DDD</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>DDD和Spring结合</title>
    <link href="/posts/3239946232/"/>
    <url>/posts/3239946232/</url>
    
    <content type="html"><![CDATA[<h1 id="DDD和Spring结合使用"><a href="#DDD和Spring结合使用" class="headerlink" title="DDD和Spring结合使用"></a>DDD和Spring结合使用</h1><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>模块是 DDD 中明确提到的一种控制限界上下文的手段，一般尽量用一个模块来表示一个领域的限界上下文。<br>一般的工程中包的组织方式为 <code>&#123;com. 公司名. 组织架构. 业务. 上下文.*&#125;</code>，这样的组织结构能够明确的将一个上下文限定在包的内部</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.company.team.bussiness.counter.*; <span class="hljs-comment">// 计数上下文</span><br><span class="hljs-keyword">import</span> com.company.team.bussiness.category.*; <span class="hljs-comment">// 分类上下文</span><br></code></pre></td></tr></table></figure><h2 id="领域对象"><a href="#领域对象" class="headerlink" title="领域对象"></a>领域对象</h2><p>对于模块内部的组织结构，一般情况下我们时按照领域对象、领域服务、领域资源库、防腐层等组织方式定义的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.company.team.bussiness.cms.domain.valobj.*; <span class="hljs-comment">// 领域对象-值对象</span><br><span class="hljs-keyword">import</span> com.company.team.bussiness.cms.domain.entity.*; <span class="hljs-comment">// 领域对象-实体</span><br><span class="hljs-keyword">import</span> com.company.team.bussiness.cms.domain.aggregate.*; <span class="hljs-comment">// 领域对象-聚合根</span><br><span class="hljs-keyword">import</span> com.company.team.bussiness.cms.service.*; <span class="hljs-comment">//领域服务</span><br><span class="hljs-keyword">import</span> com.company.team.bussiness.cms.repo.*; <span class="hljs-comment">//领域资源库</span><br><span class="hljs-keyword">import</span> com.company.team.bussiness.cms.facade.*; <span class="hljs-comment">// 领域防腐层</span><br></code></pre></td></tr></table></figure><p>领域驱动要解决的一个重要的问题，就是解决对象的贫血问题，而领域对象则最直接的反应了这个能力。<br>我们定义聚合根（文章）和值对象（计数器），来举例说明<br>聚合根持有文章的 Id 和文章的计数器，这里的计数器之所以被列为值对象，而非实体的一个属性，是因为计数器是有多部分组成的，比如真实的阅读量、推广阅读量等。<br>在文章领域对象中，我们需要定义一个方法，来获取文章的计数器，用于页面上的显示，这个逻辑可能会很复杂，涉及到爆文、专栏作者级别、发布时间等因素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company.team.bussiness.domain.aggregate;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Article</span>&#123;<br><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> CategoryRepository categoryRepository;<br><span class="hljs-keyword">private</span> Long articleId;  <span class="hljs-comment">// 文章id</span><br><span class="hljs-keyword">private</span> ArticleCount articleCount; <span class="hljs-comment">//文章计数器</span><br><br><span class="hljs-comment">// 查询计显示数量，这里简化一些逻辑，甚至是不符合实际业务场景</span><br><span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getShowArticleCount</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.articleCount == <span class="hljs-literal">null</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.articleCount.realCount + categoryRepository.getCategoryWeight(<span class="hljs-built_in">this</span>.category) + (<span class="hljs-built_in">this</span>.articleCount.addCount) * DayUtils.calDaysByNow(<span class="hljs-built_in">this</span>.articleCount.deadDays);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="资源库"><a href="#资源库" class="headerlink" title="资源库"></a>资源库</h2><p>资源库可以理解成 Dao，但是比 Dao 更宽泛，存储的手段可以是多样话的，常见的无非是数据库、分布式缓存、本地缓存等。资源库（Repository）的作用，就是对领域的存储和访问进行统一管理的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.company.team.bussiness.repo.dao.ArticleDao; <span class="hljs-comment">// 数据库访问对象-文章</span><br><span class="hljs-keyword">import</span> com.company.team.bussiness.repo.dao.CommentDao; <span class="hljs-comment">// 数据库访问对象-评论</span><br><span class="hljs-keyword">import</span> com.company.team.bussiness.repo.dao.po.ArticlePO; <span class="hljs-comment">// 数据库持久化对象-文章</span><br><span class="hljs-keyword">import</span> com.company.team.bussiness.repo.dao.po.CommentPO; <span class="hljs-comment">// 数据库持久化对象-评论</span><br><span class="hljs-keyword">import</span> com.company.team.bussiness.repo.cache.ArticleObj; <span class="hljs-comment">// 分布式缓存访问对象-文章缓存</span><br></code></pre></td></tr></table></figure><p>资源库对外的整体访问由 Repository 提供，它聚合了各个资源库的数据信息，同时也承担了资源存储的逻辑（例如缓存更新机制等等）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company.team.bussiness.repo;<br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArticleRepository</span>&#123;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> ArticleDao articleDao;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> ArticleDaoCacheAccessObj articleDaoCacheAccessObj;<br><br><span class="hljs-keyword">public</span> Article <span class="hljs-title function_">getArticleById</span><span class="hljs-params">(<span class="hljs-type">int</span> articleId)</span>&#123;<br><span class="hljs-type">Article</span> <span class="hljs-variable">article</span> <span class="hljs-operator">=</span> articleDaoCacheAccessObj.get(articleId);<br><span class="hljs-keyword">if</span>(article != <span class="hljs-literal">null</span>)&#123;<br><span class="hljs-keyword">return</span> article;<br>&#125;<br>article = getArticleFromDB(articleId);<br>articleCacheAccessObj.add(articleId, article);<br><span class="hljs-keyword">return</span> article;<br>&#125;<br><br><span class="hljs-keyword">public</span> Article <span class="hljs-title function_">getArticleFromDB</span><span class="hljs-params">(articleId)</span>&#123;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>比起讲资源管理放在服务中的做法，由资源库对资源进行管理，职责更加明确，代码的可读性和可维护性也更强。</p><h2 id="防腐层"><a href="#防腐层" class="headerlink" title="防腐层"></a>防腐层</h2><p>也称适配层。在一个上下文中，有时需要对外部上下文进行访问，通常会引入防腐层的概念来对外部上下文的访问进行一次转义。<br>有以下几种情况会考虑到引入防腐层：</p><ol><li>需要讲外部上下文中的模型翻译成本上下文理解的模型</li><li>不同上下文之间的团队没有协作关系，如果是供奉者关系，建议引入防腐层，避免外部上下文变化对本上下文的侵蚀</li><li>该访问本上下文使用广泛，为了避免改动影响范围过大。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company.team.bussiness.facade;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArticleFacade</span>&#123;<br><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> ArticleService articleService;<br><br><span class="hljs-keyword">public</span> Article <span class="hljs-title function_">getArticle</span><span class="hljs-params">(ArticleContext context)</span>&#123;<br><span class="hljs-type">ArticleResponse</span> <span class="hljs-variable">resp</span> <span class="hljs-operator">=</span> articleService.getArticle(context.getArticleId());<br><span class="hljs-keyword">return</span> buildArticle(resp);<br>&#125;<br><br><span class="hljs-keyword">private</span> Article <span class="hljs-title function_">buildArticle</span><span class="hljs-params">(ArticleResponse resp)</span>&#123;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>如果内部多个上下文对外部上下文需要访问，那么可以考虑将其放到通用上下文中。</li></ol><h2 id="领域服务"><a href="#领域服务" class="headerlink" title="领域服务"></a>领域服务</h2><p>我们将领域行为封装到领域对象中，将资源管理行为封装到资源库中，将外部上下文的交互行为封装到防腐层中。此时，我们再回过头来看领域服务时，能狗发现领域服务本身所承载的职责也就更加清晰了，几就是通过串联领域对象、资源库和防腐层等一系列领域内的对象行为，对其他上下文提供交互的接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company.team.bussiness.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommentServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CommentService</span>&#123;<br><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> CommentFacade commentFacade;<br><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> ArticleRepository articleRepository;<br><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> ArticleService articleService;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> CommentResponse <span class="hljs-title function_">commentArticle</span><span class="hljs-params">(CommentContext commentContext)</span>&#123;<br><span class="hljs-type">Article</span> <span class="hljs-variable">article</span> <span class="hljs-operator">=</span> articleRepository.getArticleById(commentContext.getArticleId); <span class="hljs-comment">//获取文章聚合根</span><br>commentFacade.doComment(commentContext); <span class="hljs-comment">//增加计数器</span><br><span class="hljs-keyword">return</span> buildCommentResponse(commentContext, article); <span class="hljs-comment">//组装评论后的文章信息</span><br>&#125;<br><br><span class="hljs-keyword">private</span> CommentResponse <span class="hljs-title function_">buildCommentResponse</span><span class="hljs-params">(CommentContext commentContext, Article article)</span>&#123;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="包结构"><a href="#包结构" class="headerlink" title="包结构"></a>包结构</h2><img src="/posts/3239946232/images/%E5%8C%85%E7%BB%93%E6%9E%84.png" alt="">]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>架构</category>
      
      <category>软件架构</category>
      
      <category>DDD</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>DDD 实战</title>
    <link href="/posts/3778015330/"/>
    <url>/posts/3778015330/</url>
    
    <content type="html"><![CDATA[<h1 id="DDD-实战"><a href="#DDD-实战" class="headerlink" title="DDD 实战"></a>DDD 实战</h1><h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><ol><li>通过公共平台梳理出系统之间的调用关系（具有 RPC 和 HTTP 调用关系），画出来。<img src="/posts/3778015330/images/%E6%9C%8D%E5%8A%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB.png" alt=""></li><li>分配组员每个人认领几个项目，来梳理项目维度关系，包括：对外接口、交互、用例、MQ 等详细说明。个别核心系统可以画出内部实体或者聚合根</li><li>小组开会，挨个 review 每个系统的业务概念，达到组内统一语言<img src="/posts/3778015330/images/%E7%BB%84%E5%86%85%E7%BB%9F%E4%B8%80%E8%AF%AD%E8%A8%80.png" alt=""></li><li>根据以上资料，即可看出不合理的调用关系（比如循环调用、不规范的调用等），甚至不合理的分层</li><li>根据主线业务自顶向下细分领域，以及限界上下文。此过程可能会颠覆之前的系统划分</li><li>根据业务组杂性，指定领域模型，选择贫血或充血模型。团队内最好实行统一习惯，以免出现交接成本过大</li><li>分工进行开发，并设置 deadline，注意：不要单一的设置一个 deadline，要设置中间 check 时间，用来分别沟通代码风格以及边界职责，以免 deadline 延期</li></ol><h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><h3 id="领域模型设计"><a href="#领域模型设计" class="headerlink" title="领域模型设计"></a>领域模型设计</h3><p>以渠道中心（一个微服务）作为例子来做领域模型设计，核心就是设计 2 个图，一个是战略设计图（宏观），一个是战术设计图（微观）</p><ol><li>领域战略设计图<br>战略设计图是一个限界上下文的角度出发去分析业务场景。主要是宏观上的核心域、子域、实体关系图。如下图：<img src="/posts/3778015330/images/%E9%A2%86%E5%9F%9F%E6%88%98%E7%95%A5%E8%AE%BE%E8%AE%A1%E5%9B%BE.png" alt=""></li><li>领域战术设计图<br>战术设计图是从一个限界上下文的角度出发分析业务场景。细化到核心业务字段、领域实体、值对象、领域服务、领域事件等。基本上这个图画完，代码已经知道怎么写了。如下图：<img src="/posts/3778015330/images/%E9%A2%86%E5%9F%9F%E6%88%98%E6%9C%AF%E8%AE%BE%E8%AE%A1%E5%9B%BE.png" alt=""></li></ol><h3 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h3><p>整体项目架构分层如下图：<br><img src="/posts/3778015330/images/DDD%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84.png" alt=""><br>四层典型 DDD 分层架构：</p><ol><li>展现层：controller 层。无业务逻辑</li><li>应用服务层：此层可以包含查询逻辑，但核心业务逻辑必须下沉到领域层</li><li>领域服务层：业务在这里组装。仓储（资源库）接口在此定义</li><li>基础设计层：仓库（资源层）实现层+PO持久化层</li></ol><p>注：</p><ol><li>简单查询不设计业务，是可以直接从应用层直接穿透到 PO 查询，不需要经过 Domain 层。DDD 本身是不限制非业务类操作跨层调用的。如下图：<img src="/posts/3778015330/images/DDD%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84.png" alt=""></li><li>DTO 是不能存在于 Domain 层的，DDD 设计不认为 DTO 是业务对象，entity 才是。或者传值简单数据类型也是可以的。</li></ol><h3 id="服务调用问题"><a href="#服务调用问题" class="headerlink" title="服务调用问题"></a>服务调用问题</h3><h4 id="域内调用"><a href="#域内调用" class="headerlink" title="域内调用"></a>域内调用</h4><p>领域内调用，随便调用。实现由一个核心域的仓库实现层（第四层）去实现多个 Repository 接口（比如这里 A 时核心域的实体名，B是支撑域、通用域等）<br><img src="/posts/3778015330/images/%E9%A2%86%E5%9F%9F%E5%86%85%E8%B0%83%E7%94%A8.png" alt=""></p><h4 id="跨域调用"><a href="#跨域调用" class="headerlink" title="跨域调用"></a>跨域调用</h4><p>跨域调用分为：</p><ol><li>同上下文跨域：ACL 层 -&gt; Adapter 适配器层 -&gt; 调用其他域的 repository （不推荐使用）<br>推荐使用：<blockquote><ol><li>使用领域事件 eventBus 来解耦</li><li>考虑是否可以合并为一个领域</li></ol></blockquote></li><li>跨上下文（肯定跨域）：ACL 层 -&gt; Adapter 适配器层 -&gt; feign 调用 <img src="/posts/3778015330/images/%E8%B7%A8%E5%9F%9F%E8%B0%83%E7%94%A8.png" alt=""></li></ol><h3 id="包结构"><a href="#包结构" class="headerlink" title="包结构"></a>包结构</h3><p>包结构：<br><img src="/posts/3778015330/images/DDD%E5%88%86%E5%B1%82.png" alt=""><br>包结构细节：<br><strong>展现层</strong>：Controller 仅做接口的入口定义和编排转发，不做任何业务处理<br><strong>应用服务层</strong>：application 负责接口参数 DTO 的简单校验，以及 DTO 和实体值对象的数据转换，对于简单业务，可以在应用层加载实体直接执行实体行为方法<br><strong>领域层</strong>：</p><ul><li>模型：根据领域模型分析领域内各个实体、聚合、聚合根、值对象等，这些对象在 <strong>*. domain.model</strong> 中定义，实体内的行为方法只负责维护实体自身的生命周期和状态</li><li>行为：领域内各实体、聚合、聚合根等，会有相应的行为，在 <strong>*.domain.model</strong>包下定义行为方法   </li><li>领域服务：领域提供的接口服务，需要定义在 <strong>*.domain.service</strong> 包下，业务相关的前置业务判断、多个实体或值对象的行为逻辑处理等，都在领域服务中实现，需要注意的是并不是每个实体都有一个对应的领域服务，但是依赖多个实体的行为方法，最好根据这个业务模块是建立一个领域服务</li><li>仓储：领域服务或上层应用服务需要使用到的基础设施层，包括 DB、Feign 调用等，定义在 <strong>*.domain.repository</strong> 下，在 <strong>*. infrastructure.repository</strong> 下实现<br><strong>适配层</strong>：在 acl 包下的 feign 定义依赖外部的接口，并在 acl 的 adapter 包编写转换，由仓储层操作实体时调用<br><strong>持久层</strong>：与常用 DAO 定义一致，由仓储层操作实体时调用<img src="/posts/3778015330/images/DDD%E5%90%84%E5%B1%82%E7%BB%86%E8%8A%82.png" alt=""></li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>架构</category>
      
      <category>软件架构</category>
      
      <category>DDD</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MVC</title>
    <link href="/posts/2218208641/"/>
    <url>/posts/2218208641/</url>
    
    <content type="html"><![CDATA[<h1 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h1><h2 id="MVC介绍"><a href="#MVC介绍" class="headerlink" title="MVC介绍"></a>MVC介绍</h2><img src="/posts/2218208641/images/MVC%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84.png" alt="MVC三层架构">]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>架构</category>
      
      <category>软件架构</category>
      
      <category>MVC</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>充血模型</title>
    <link href="/posts/2373614283/"/>
    <url>/posts/2373614283/</url>
    
    <content type="html"><![CDATA[<h1 id="充血模型"><a href="#充血模型" class="headerlink" title="充血模型"></a>充血模型</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>充血模型中，绝大多业务逻辑都因该放在 <code>domain object</code> 里面，包括持久话逻辑，而 <code>Service</code> 层是很薄的一层，仅封装事务和少量逻辑，不和<code>dao</code>层打交道<br><em>Service</em>：组合服务，也叫事务服务<br><em>model</em>：除包含 <code>get/set</code> 方法，还包含原子服务和数据持久化的逻辑</p><h2 id="事例"><a href="#事例" class="headerlink" title="事例"></a>事例</h2><blockquote><p>充血模型和贫血模型的区别在于业务逻辑划分，将绝大多数业务逻辑放到 Domain 中。<br>Service(事务封装) -&gt; Domain Object &lt;–&gt; Dao</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Article</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ArticleDao articleDao;<br><br><span class="hljs-keyword">private</span> Long id;<br><span class="hljs-keyword">private</span> String title;<br><span class="hljs-keyword">private</span> Long authorId;<br><br><span class="hljs-comment">// 使用 articleDao 进行持久化交互</span><br><span class="hljs-keyword">public</span> List&lt;Article&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> articleDao.findAll();<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isHotClass</span><span class="hljs-params">(Article article)</span>&#123;<br><span class="hljs-keyword">return</span> Stream.of(<span class="hljs-number">57</span>,<span class="hljs-number">102</span>).anyMatch(classId-&gt;classId.equals(article.getId));<br>&#125;<br><br><span class="hljs-keyword">public</span> Article <span class="hljs-title function_">changeClass</span><span class="hljs-params">(Article article, ArticleClass ac)</span>&#123;<br><span class="hljs-keyword">return</span> article.setClassId(ac.getId());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>所有的业务逻辑都在 Domain 中，事务管理也在 Item 中实现。</strong><br>优点：</p><ol><li>更加符合OO的原则</li><li>Service 层很薄，只充当 Facade 的角色，不和Dao打交道<br>缺点：</li><li>Dao 和 Domain Object 形成了双向依赖，复杂的双向依赖会导致很多潜在的问题</li><li>如何划分 Service 层逻辑和 Domain 层逻辑是非常含混的，在实际项目中，由于设计和开发人员的水平差异，可能导致整个结构的混乱无序</li></ol>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>架构</category>
      
      <category>软件架构</category>
      
      <category>DDD</category>
      
      <category>领域模型</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>失血模型</title>
    <link href="/posts/2876246174/"/>
    <url>/posts/2876246174/</url>
    
    <content type="html"><![CDATA[<h1 id="失血模型"><a href="#失血模型" class="headerlink" title="失血模型"></a>失血模型</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>失血模型中，<code>domain object</code> 只有属性的 <code>get</code>、<code>set</code> 方法的纯数据类，所有的业务逻辑完全由 <code>service</code> 层来完成的，由于没有 <code>dao</code>，<code>Service</code> 直接操作数据库，进行数据持久化</p><p><em>Service</em>：肿胀的服务逻辑<br><em>model</em>：只包含 <code>get/set</code>方法</p><h2 id="事例"><a href="#事例" class="headerlink" title="事例"></a>事例</h2><blockquote><p>Domain Object 只有属性的 <code>getter/setter</code> 方法的纯数据类，所有的业务逻辑完全由 business object 完成 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Article</span> &#123;<br><span class="hljs-keyword">private</span> Long id;<br><span class="hljs-keyword">private</span> String title;<br><span class="hljs-keyword">private</span> Long classId;<br><span class="hljs-keyword">private</span> String authorName;<br><span class="hljs-keyword">private</span> Long authorId;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ArticleDao</span>&#123;<br>Article <span class="hljs-title function_">getArticleById</span><span class="hljs-params">(Long id)</span>;<br>Article <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>架构</category>
      
      <category>软件架构</category>
      
      <category>DDD</category>
      
      <category>领域模型</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>胀血模型</title>
    <link href="/posts/491354674/"/>
    <url>/posts/491354674/</url>
    
    <content type="html"><![CDATA[<h1 id="胀血模型"><a href="#胀血模型" class="headerlink" title="胀血模型"></a>胀血模型</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>胀血模型取消了 <code>service</code> 层，只剩下 <code>domain object</code> 和 <code>dao</code> 两层，在<code>domain object</code>的<code>domain logic</code>上面封装事务</p><h2 id="事例"><a href="#事例" class="headerlink" title="事例"></a>事例</h2><blockquote><p>直接取消 Service 层，只剩下 Domain Object 和 Dao 两层，在 Domain Object 的 Domain Logic 上面封装事务<br> Domain Object（事务封装，业务逻辑）&lt;–&gt; Dao</p></blockquote><p>优点：</p><ol><li>简化了分层</li><li>也算符合OO<br>缺点：</li><li>很多不是 Domain Logic 的 Service 逻辑也被强行放入 Domain Object，引起了 Domain Object 模型的很不稳定</li><li>Domain Object 暴露给 Web 层过多信息，可能引起意想不到的副作用</li></ol>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>架构</category>
      
      <category>软件架构</category>
      
      <category>DDD</category>
      
      <category>领域模型</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>贫血模型</title>
    <link href="/posts/2879773850/"/>
    <url>/posts/2879773850/</url>
    
    <content type="html"><![CDATA[<h1 id="贫血模型"><a href="#贫血模型" class="headerlink" title="贫血模型"></a>贫血模型</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>贫血模型中，<code>domain object</code> 包含了不依赖持久化的原子领域逻辑，而组合逻辑在 <code>Service</code> 层<br><em>service</em>：组合服务，也叫事务服务<br><em>model</em>：除包含 <code>get/set</code> 方法，还包含原子事务<br><em>dao</em>：数据持久化</p><h2 id="事例"><a href="#事例" class="headerlink" title="事例"></a>事例</h2><blockquote><p>Domain Object 包含了不依赖于持久化的领域逻辑，而那些依赖持久化的领域逻辑被分到了 Service 层</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Article</span>&#123;<br><span class="hljs-keyword">private</span> Long id;<br><span class="hljs-keyword">private</span> String title;<br><span class="hljs-keyword">private</span> Long authorId;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isHotClass</span><span class="hljs-params">(Article article)</span>&#123;<br><span class="hljs-keyword">return</span> Stream.of(<span class="hljs-number">57</span>,<span class="hljs-number">102</span>).anyMatch(classId-&gt;classId.equals(article.getId));<br>&#125;<br><br><span class="hljs-keyword">public</span> Article <span class="hljs-title function_">changeClass</span><span class="hljs-params">(Article article, ArticleClass ac)</span>&#123;<br><span class="hljs-keyword">return</span> article.setClassId(ac.getId());<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArticleDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ArticleDao</span>&#123;<br><span class="hljs-keyword">private</span> ArticleDao articleDao;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changeClass</span><span class="hljs-params">(Article article, ArticleClass ac)</span>&#123;<br>article.changeClass(article, ac);<br>articleDao.update(article);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：这个模式不在 Domain 中依赖 Dao，持久化的工作还需要在 Dao 或者Service中进行</strong><br>优点：</p><ol><li>各层单向依赖，结构清晰<br>缺点：</li><li>Domain Object 的部分比较紧密依赖的持久化 Domain Logic 被分离到 Service 层，显得不够OO</li><li>Service层过于厚重</li></ol>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>架构</category>
      
      <category>软件架构</category>
      
      <category>DDD</category>
      
      <category>领域模型</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java HashMap源码分析</title>
    <link href="/posts/379/"/>
    <url>/posts/379/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-HashMap"><a href="#Java-HashMap" class="headerlink" title="Java HashMap"></a>Java HashMap</h1><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>哈希表结构（链表散列：数组+链表）实现，结合数组和链表的优点。当链长超过 8 时，链表转换为红黑树</p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>底层是 hash 数组和单向链表实现，数组中的每个元素都是链表，由 Node 内部类（实现 Map。Map. Entry 接口）实现，HashMap 通过 put 和 get 方法存储和获取</p><p>存储对象时，将 K&#x2F;V 键值传给 <code>put()</code> 方法</p><ol><li>调用 <code>hash(K)</code> 方法计算 K 的 hash 值，然后结合数组长度，计算得到数组的下标</li><li>调整数组大小（当容器中的元素个数大于 capacity * loadfactor 时，容器会进行扩容 resize 为 2n）</li><li>如果 K 的 hash 值在 HashMap 中不存在，则执行插入，若存在，且 equals 返回相等，则更新 V，如果不相等，则插入链表的尾部（尾插法）或者红黑树中（树的添加方式）</li><li>当碰撞导致链表大于 <code>TREEIFY_THRESHOLD=8</code> 就把链表转换成红黑树</li></ol><p>获取对象时，将 K 传给 <code>get()</code> 方法</p><ol><li>调用 hash(K) 方法计算 K 的 hash 值 从而获取该键值在链表的数组下标</li><li>顺序遍历链表，<code>equals()</code> 方法查找相同 Node 链表中 K 值对应的 V 值</li></ol><p><strong>hashCode 用于定位，存储位置；equals用于比较两者是否相等</strong></p><h2 id="为什么不用二叉树"><a href="#为什么不用二叉树" class="headerlink" title="为什么不用二叉树"></a>为什么不用二叉树</h2><p>之所以选择红黑树是为了解决二叉查找树的缺陷，二叉查找树在特殊情况下会变成一条线性结构（这就跟原来使用链表结构一样了，造成很深的问题），遍历查找会非常慢。而红黑树在插入新数据后可能需要通过左旋，右旋、变色这些操作来保持平衡，引入红黑树就是为了查找数据快，解决链表查询深度的问题，我们知道红黑树属于平衡二叉树，但是为了保持“平衡”是需要付出代价的，但是该代价所损耗的资源要比遍历线性链表要少，所以当长度大于8的时候，会使用红黑树，如果链表长度很短的话，根本不需要引入红黑树，引入反而会慢</p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>编程语言</category>
      
      <category>Java</category>
      
      <category>源码</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java线程</title>
    <link href="/posts/382/"/>
    <url>/posts/382/</url>
    
    <content type="html"><![CDATA[<h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><ul><li>NEW：新建状态，线程被创建出来，但尚未启动时的线程状态</li><li>RUNNABLE：就绪状态，表示可以运行的线程状态，可能是在运行，也有可能是在排队等待操作系统分配CPU资源</li><li>BLOCKED：阻塞等待锁的线程状态，表示处于阻塞状态的线程正在等待监视器锁，比如等待执行<code>synchronized</code>代码块或者使用<code>synchronized</code>标记的方法</li><li>WAITING：等待状态，一个处于等待状态的线程正在等待另一个线程执行某个特定动作，比如，一个线程调用了 <code>Object.wait()</code> 方法，那就在等待另一个线程调用 <code>Object.notify()</code> 或 <code>Object.notifyAll()</code> 方法</li><li>TIMED_WAITING：计时等待状态和 WAITING 类似，只是多了超时时间，比如调用了有超时时间设置的方法 <code>Object.warit(long timeout)</code> 和 <code>Thread.join(long timeout)</code> 等这些方法时，才会进入此状态</li><li>TERMINATED：终止状态，表示线程已经执行完成</li></ul><h2 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h2><p>创建线程并指定线程需要执行的业务方法，调用线程的 <code>start()</code> 方法，就会从 <code>NEW</code> 状态变成 <code>RUNNABLE</code> 状态，线程会判断要执行的方法中有没有 <code>synchronized</code> 同步代码块，如果有并且其他线程也在使用此锁，那么线程就会变为 <code>BLOCKED</code> 状态，当其他线程使用完此锁之后，线程会继续执行剩余方法。当遇到 <code>Object.wait()</code> 或 <code>Thread.join()</code> 时，线程就会变为 <code>WAITING</code> 状态，如果是带了超时时间的等待方法，那么线程就会进入 <code>TIME_WAITING()</code> 状态，当有其他线程执行了 <code>notify()</code> 或 <code>notifyAll()</code> 方法之后，线程被唤醒继续执行剩下的方法<br><img src="/posts/382/images/%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81.png" alt="线程的执行流程"></p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>编程语言</category>
      
      <category>Java</category>
      
      <category>线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java String源码分析</title>
    <link href="/posts/380/"/>
    <url>/posts/380/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-String"><a href="#Java-String" class="headerlink" title="Java String"></a>Java String</h1><h2 id="Stirng、StringBuilder-和-StringBuffer-的区别"><a href="#Stirng、StringBuilder-和-StringBuffer-的区别" class="headerlink" title="Stirng、StringBuilder 和 StringBuffer 的区别"></a>Stirng、StringBuilder 和 StringBuffer 的区别</h2><p>因为 String 类型是不可变的，所以在字符串拼接的时候如果使用 String 会导致性能很低，因此需要看 StirngBuffer 来保证性能，StringBuffer 提供了可用于字符串的拼接，使用了 <code>synchronized</code> 来保证线程安全。但是会导致性能低下，所有使用 StringBuilder 来在非线程安全下使用并保证性能</p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>编程语言</category>
      
      <category>Java</category>
      
      <category>源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 数据类型</title>
    <link href="/posts/374/"/>
    <url>/posts/374/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-数据类型"><a href="#Java-数据类型" class="headerlink" title="Java 数据类型"></a>Java 数据类型</h1><table><thead><tr><th>数据类型</th><th>代表含义</th><th>默认值</th><th>取值</th><th>包装类</th></tr></thead><tbody><tr><td>boolean</td><td>布尔型</td><td>false</td><td>0(false) 到 1(true)</td><td>Boolean</td></tr><tr><td>byte</td><td>字节型</td><td>(byte)0</td><td>﹣128 到 127</td><td>Byte</td></tr><tr><td>char</td><td>字符型</td><td>‘\u0000’(空)</td><td>‘\u0000’ 到 ‘\uFFFF’</td><td>Character</td></tr><tr><td>short</td><td>短整数型</td><td>(short)0</td><td>-$2^{15}$ 到 $2^{15}$</td><td>Short</td></tr><tr><td>int</td><td>整数型</td><td>0</td><td>﹣$2^{31}$ 到 $2^{31}$﹣1</td><td>Integer</td></tr><tr><td>long</td><td>长整数型</td><td>0 L</td><td>﹣$2^{63}$ 到 $2^{63}$﹣1</td><td>Long</td></tr><tr><td>float</td><td>单浮点型</td><td>0.0f</td><td>1.4e-45 到 3.4e+38</td><td>Float</td></tr><tr><td>double</td><td>双浮点型</td><td>0.0d</td><td>4.9e-324 到 1. 798e+308</td><td>Double</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>编程语言</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基本数据类型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go编译模式</title>
    <link href="/posts/368/"/>
    <url>/posts/368/</url>
    
    <content type="html"><![CDATA[<h1 id="Go-编译模式"><a href="#Go-编译模式" class="headerlink" title="Go 编译模式"></a>Go 编译模式</h1><p>在使用 <code>go build</code> 或 <code>go install</code> 两个命令编译代码的时候要生成什么样的文件。即:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> build -buildmode=&lt;mode&gt;<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> install -buildmode=&lt;mode&gt;<br></code></pre></td></tr></table></figure><p>#Todo 记录 Go 语言各种编译模式 </p><ol><li><a href="https://chenjiehua.me/golang/golang-buildmode.html">https://chenjiehua.me/golang/golang-buildmode.html</a></li><li><a href="https://www.niansong.top/2020/12/29/Go%E8%AF%AD%E9%9F%B3%E7%BC%96%E8%AF%91%E6%A8%A1%E5%BC%8F%E6%B5%85%E8%B0%88/">https://www.niansong.top/2020/12/29/Go%E8%AF%AD%E9%9F%B3%E7%BC%96%E8%AF%91%E6%A8%A1%E5%BC%8F%E6%B5%85%E8%B0%88/</a></li></ol><h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><p>在 go 编译时，go 编译器支持的模式有：</p><ol><li><p><code>-buildmode=archive</code>：把源文件编译成 Go 语言的静态库文件，如果包名为<code>main</code>会被忽略掉</p></li><li><p><code>-buildmode=c-archive</code>：把源文件编译成 C 语言可以使用的静态库，也就是 <code>.a</code> 文件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br><span class="hljs-comment">// export Add</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Add</span><span class="hljs-params">(a,b <span class="hljs-type">int</span>)</span></span><span class="hljs-type">int</span>&#123;<br>fmt.Printf(<span class="hljs-string">&quot;%d + %d = %d\n&quot;</span>, a, b, a + b)<br><span class="hljs-keyword">return</span> a + b<br>&#125;<br></code></pre></td></tr></table></figure><p>然后使用 <code>-buildmode=c-archive</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> build -buildmode=c-archive add.<span class="hljs-keyword">go</span><br></code></pre></td></tr></table></figure></li><li><p><code>-buildmode=c-shared</code>：编译成 C 可以使用的动态库文件，也就是 <code>.so</code> 文件或者<code>.dll</code>文件</p></li><li><p><code>-buildmode=default</code>：默认编译</p></li><li><p><code>-buildmode=shared</code>：Go 使用的静态链接库文件，C 不能使用，将非 <code>main</code> 的 package 编译为动态链接库，并在构建其他 Go 程序时使用 <code>-linkshared</code> 参数来指定，编译 Go 动态库 <code>go install -buildmode=shared std</code>，需要注意的是暂时不支持 macos</p></li><li><p><code>-buildmode=exe</code>：编译成 <code>.exe</code> 文件，忽略包名为 <code>main</code></p></li><li><p><code>-buildmode=pie</code>：编译带上这个参数可以防止反编译，即使反编译也看不懂</p></li><li><p><code>-buildmode=plugin</code>：Go 的插件，将 <code>package main</code> 编译为一个 go 插件，并可在运行时动态加载</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>编程语言</category>
      
      <category>Go</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Go数据类型</title>
    <link href="/posts/367/"/>
    <url>/posts/367/</url>
    
    <content type="html"><![CDATA[<h1 id="Go-数据类型"><a href="#Go-数据类型" class="headerlink" title="Go 数据类型"></a>Go 数据类型</h1><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><ol><li>uint8: 无符号 8 为整形 (0-255)</li><li>unit16: 无符号16位整形(0-65535)</li><li>unit32: 无符号32位整形(0-4294967295)</li><li>unit64: 无符号64位整形(0-18446744073709551615)</li><li>int8: 有符号 8位整型 (-128 到 127)</li><li>int16: 有符号 16位整型 (-32768 到 32767)</li><li>int32: 有符号 32位整型 (-2147483648 到 2147483647)</li><li>int64: 有符号 64 位整型(-9223372036854775808 到 9223372036854775807)</li></ol><h2 id="特殊整形"><a href="#特殊整形" class="headerlink" title="特殊整形"></a>特殊整形</h2><ol><li>uint: 32 位操作系统上就是 <code>uint32</code>，64 位操作系统上就是 <code>uint64</code></li><li>int: 32 位操作系统上就是 <code>int32</code>，64位操作系统上就是<code>int64</code></li><li>uintptr: 无符号整型，用于存放一个指针</li></ol><h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><ol><li>float32: 最大范围 <code>3.4e38</code>，常量 <code>math.MaxFloat32</code> </li><li>float64: 最大范围 <code>1.8e308</code>，常量 <code>math.MaxFloat64</code></li></ol><h2 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h2><ol><li>complex64: 实部和虚部都是 32 位</li><li>complex128: 实部和虚部都是 64 位</li></ol><h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><p>bool 进行声明，只有 <code>true</code> 和 <code>false</code> 两个值，默认为 false </p><h2 id="byte-和-rune-类型"><a href="#byte-和-rune-类型" class="headerlink" title="byte 和 rune 类型"></a>byte 和 rune 类型</h2><ol><li>uint8 类型，或者叫 byte 型，代表一个<code>ASCII</code>码字符</li><li>rune 类型：代表一个 <code>UTF-8</code> 字符</li></ol><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>定义: <code>var 变量名 [元素数量]类型</code></p><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>本质就是对底层数组的封装，包含三个信息：底层数组的指针、切片的长度(len)和切片的容量(cap)，只是一个引用，最终指向的还是原数组同一个地址<br>切片是一个拥有相同类型元素的可变长度的序列。基于数据类型做的一层封装。非常灵活，支持自动扩容。是一个引用类型，内部结构包含 <code>地址</code>、<code>长度</code> 和 <code>容量</code>。一般用于快速操作一块数据集合</p><p>定义: <code>var 变量名 []类型</code> </p><blockquote><p>切片的长度和容量</p></blockquote><p>切片拥有自己的长度和容量，可以通过内置的 <code>len()</code> 函数求长度，使用内置的<code>cap()</code>函数求切片的容量</p><p><strong>切片无法直接比较，不能使用 <code>==</code> 来判断两个切片是否相等。可以通过<code>equal.Equal</code> 进行比较</strong></p><h4 id="复制切片"><a href="#复制切片" class="headerlink" title="复制切片"></a>复制切片</h4><p><code>copy()</code> 可以将一个切片的数据复制到另外一个切片空间中。使用方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-built_in">copy</span>(destSlice,srcSlice []T)<br></code></pre></td></tr></table></figure><p>destSlice: 数据来源切片<br>srcSlice: 目标切片</p><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>   <span class="hljs-keyword">var</span> a []<span class="hljs-type">int</span> = []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;  <br>   a = <span class="hljs-built_in">append</span>(a[:<span class="hljs-number">2</span>], a[<span class="hljs-number">3</span>:]...)  <br>   fmt.Println(a)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">map</span>[keyType]valueType<br></code></pre></td></tr></table></figure><p>这样定义出来的变量默认初始值是 nil，需要使用 make 函数 来分配内存。语法为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[keyType]valueType, [<span class="hljs-built_in">cap</span>])<br></code></pre></td></tr></table></figure><h3 id="判断-key-是否存在"><a href="#判断-key-是否存在" class="headerlink" title="判断 key 是否存在"></a>判断 key 是否存在</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">value,ok := <span class="hljs-keyword">map</span>[key]<br></code></pre></td></tr></table></figure><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>   <span class="hljs-keyword">var</span> a = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">string</span>)  <br>   a[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;张三&quot;</span>  <br>   fmt.Println(a)  <br>   <span class="hljs-keyword">for</span> _, value := <span class="hljs-keyword">range</span> a &#123;  <br>      <span class="hljs-built_in">print</span>(value)  <br>   &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-built_in">delete</span>(<span class="hljs-keyword">map</span>,key)<br></code></pre></td></tr></table></figure><h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h2><p><strong>derfer 语句会将其后面跟随的语句进行延迟处理。在 defer 归属的函数即将返回时，将延迟处理的语句按 defer 定义的逆序进行执行。也就是说，先被 defer 的语句最后被执行，最后被 defer 的语句，最先被执行</strong></p><h3 id="defer-的执行时机"><a href="#defer-的执行时机" class="headerlink" title="defer 的执行时机"></a>defer 的执行时机</h3><blockquote><p>Go 语言的函数中，<code>return</code> 语句在底层并不是原子操作，分为给返回值赋值和 RET 指令两步。而 defer 语句执行的时机在返回值赋值操作后，RET 指令执行前。</p></blockquote><img src="/posts/367/images/defer%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA.png" alt="defer执行时机"><h2 id="Go-结构体"><a href="#Go-结构体" class="headerlink" title="Go 结构体"></a>Go 结构体</h2><p><strong>Go 语言没有类的概念，也不支持类的继承等面向对象的概念。Go 语言中通过结构体的内嵌再配合接口比面向对象具有更高的扩展性和灵活性</strong></p><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>使用  <code>type</code>  和 <code>struct</code> 关键字来定义结构</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> 类型名 <span class="hljs-keyword">struct</span>&#123;<br>字段名 字段类型<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>类型名：标识自定义结构体的名称，在同一个包内不能重复</li><li>字段名：表示结构体字段名</li><li>字段类型：表示结构体字段的具体类型</li></ul><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="接口类型"><a href="#接口类型" class="headerlink" title="接口类型"></a>接口类型</h3><p>接口类型具体描述了一系列方法的集合，接口的实例则是实现了这些方法的具体类型。<br><strong>Go 语言中的接口的实现都是隐式的，只需要实现对应接口中的所有方法就实现了这个接口</strong></p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>编程语言</category>
      
      <category>Go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基本数据类型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速学会一门语言的50%</title>
    <link href="/posts/356/"/>
    <url>/posts/356/</url>
    
    <content type="html"><![CDATA[<p>现在的开发工作要求我们能够快速掌握一门语言。一般来说应对这种挑战有两种态度：其一，粗粗看看语法，就撸起袖子开干，边查Google边学习；其二是花很多时间完整地把整个语言学习一遍，做到胸有成竹，然后再开始做实际工作。然而这两种方法都有弊病。第二种方法的问题当然很明显，不仅浪费了时间，偏离了目标，而且学习效率不高。因为没有实际问题驱动的语言学习通常是不牢固不深入的。有的人学着学着成了语言专家，反而忘了自己原本是要解决问题来的。第一种路子也有问题，在对于这种语言的脾气秉性还没有了解的情况下大刀阔斧地拼凑代码，写出来的东西肯定不入流。说穿新鞋走老路，新瓶装旧酒，那都是小问题，真正严重的是这样的程序员可以在短时间内堆积大量充满缺陷的垃圾代码。由于通常开发阶段的测试完备程度有限，这些垃圾代码往往能通过这个阶段，从而潜伏下来，在后期成为整个项目的毒瘤，反反复复让后来的维护者陷入西西弗斯困境。<br>实际上语言学习有一定规律可循，对于已经掌握一门语言的开发者来说，对于一般的语言，完全可以以最快的速度，在几天至一周之内掌握其最常用的50%，而且保证路子基本正宗，没有出偏的弊病。其实真正写程序不怕完全不会，最怕一知半解的去攒解决方案。因为你完全不会，就自然会去认真查书学习，如果学习能力好的话，写出来的代码质量不会差。而一知半解，自己动手土法炼钢，那搞出来的基本上都是废铜烂铁。比如错误处理和序列化，很多人不去了解“正路子”，而是凭借自己的一知半解去攒野路子，这是最危险的。因此，即使时间再紧张，这些内容也是必须首先完整了解一遍的。掌握这些内容之后进入实际开发，即使有问题，也基本不会伤及项目大体。而开发者本人则可以安步当车，慢慢在实践中提高自己。<br>以下列出一个学习提纲，主要针对的是有经验的人，初学者不合适。这个提纲只能用于一般的庸俗编程语言学习，目前在流行编程语言排行榜上排前20的基本上都是庸俗语言。如果你要学的是LISP之类非庸俗语言，或是某个软件中的二次开发语言，这里的建议未必合适。还是那句话，仅供参考。</p><ol><li><strong>首先了解该语言的 #基本数据类型 ，基本 #语法 和 #主要语言构造</strong> ， #主要数学运算符 和 #print函数 的使用，达到能够写谭浩强程序设计书课后数学习题的程度</li><li><strong>其次掌握 #数组 和其他 #集合类 的使用</strong>，有基础的话可以理解一下 #泛型 ，如果理解不了也问题不大，后面可以补</li><li>简单 #字符串 处理。所谓简单，就是Regex和Parser以下的内容，什么查找替换，截断去字串之类的。不过这个阶段有一个难点，就是字符编码问题。如果理解不了，可以先跳过，否则的话最好在这时候把这个问题搞定，免留后患</li><li><strong>基本 #面向对象 或者 #函数式编程 的特征</strong>，无非是什么继承、多态、Lambda函数之类的，如果有经验的话很快就明白了</li><li><strong>#异常 、 #错误处理 、 #断言 、 #日志 和 #调试支持</strong> ，对 #单元测试 的支持。你不一定要用TDD，但是在这个时候应该掌握在这个语言里做TDD的基本技能</li><li><strong>程序代码和 #可执行代码 的 #组织机制 ， #运行时模块加载  、 #符号查找机制</strong>，这是初学时的一个难点，因为大部分书都不太注意介绍这个极为重要的内容</li><li><strong>#基本输入输出  和 #文件处理 ， #输入输出流类 的组织</strong>，这通常是比较繁琐的一部分，可以提纲挈领学一下，搞清楚概念，用到的时候查就是了。到这个阶段可以写大部分控制台应用了；</li><li><strong>该语言如何进行 #callback方法调用 ，如何支持 #事件驱动编程模型</strong>。在现代编程环境下，这个问题是涉及开发思想的一个核心问题，几乎每种语言在这里都会用足功夫，.NET的delegate，Java的anonymous inner class，Java 7的closure，C++OX的 tr1::function&#x2F;bind，五花八门。如果能彻底理解这个问题，不但程序就不至于写得太走样，而且对该语言的设计思路也能有比较好的认识</li><li>如果有必要，可在这时研究 #regex 和 #XML处理 问题，如无必要可跳过</li><li><strong>#序列化 和 #反序列化</strong>，掌握一下缺省的机制就可以了</li><li>如果必要，可了解一下 #线程 、 #并发 和 #异步调用 机制，主要是为了读懂别人的代码，如果自己要写这类代码，必须专门花时间严肃认真系统地学习，严禁半桶水上阵</li><li>#动态编程 ， #反射 和 #元数据编程 ， #数据和程序之间的相互转化 机制， #运行时编译和执行 的机制 ，有抱负的开发者在这块可以多下些功夫，能够使你对语言的认识高出一个层面</li><li>如果有必要，可研究一下该语言对于 #泛型 的支持，不必花太多时间，只要能使用现成的 #泛型集合 和 #泛型函数 就可以了，可在以后闲暇时抽时间系统学习。需要注意的是，泛型技术跟多线程技术一样，用不好就成为万恶之源，必须系统学习，谨慎使用，否则不如不学不用</li><li>如果还有时间，最好咨询一下有经验的人，看看这个语言较常用的 #特色 features是什么，如果之前没学过，应当补一下。比如Ruby的block interator, Java的dynamic proxy，C# 3的LINQ和extension method。没时间的话，我认为也可以边做边学，没有大问题</li><li>有必要的话，在工作的闲暇时间，可以着重考察两个问题，第一，这个语言有哪些 #惯用法 和 #模式 ，第二，这个语言的 #编译执行机制  、 #解释执行机制<br>至此语言的基本部分就可以说掌握了，之后是做数据库、网络还是做图形，可以根据具体需求去搞，找相应的成熟框架或库，边做边学，加深理解。对于一个庸俗语言，我自己把上面的内容走一遍大概要花2-3周时间，不能算很快，但也耽误不了太多事情，毕竟不是每个月都学新语言。掌握了以上的内容，就给练武术打好了基本功，虽然不见得有多优秀，但是肯定是根正苗红，将来不必绕大弯子。就算是临时使用的语言，把上面这个提纲精简一下，只看蓝色重体字的部分，大致能在几天到一周内搞定，不算是太耗时，而且写出来的代码不会太不靠谱。<br>以上提纲未设及内存模型。对于C&#x2F;C++，这个问题很重要，要放在显著位置来考虑，但对于其他语言，这个问题被透明化了，除非你要做hardcore项目，否则不必太关注。</li></ol>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>编程语言</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Go函数</title>
    <link href="/posts/364/"/>
    <url>/posts/364/</url>
    
    <content type="html"><![CDATA[<h1 id="Go-函数"><a href="#Go-函数" class="headerlink" title="Go 函数"></a>Go 函数</h1><p><strong>Go 语言支持函数、匿名函数和闭包，并且函数是 Go 语言中属于一等公民</strong></p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> 函数名<span class="hljs-params">(参数)</span></span>返回值&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>函数名：由字母、数字、下划线组成。但是函数名的第一个字母不能是数字。在同一个包内，函数名不能重复</li><li>参数：由参数变量和参数类型组成</li><li>返回值：由返回值变量和变量的类型组成，多个返回值使用 <code>()</code> 包裹，并用 <code>,</code> 分隔</li></ul><h2 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h2><p>使用 <code>type</code> 关键字定义一个函数类型，格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> calculation <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span><br></code></pre></td></tr></table></figure><p>凡是满足这个条件的函数都是 <code>calculation</code> 类型的函数。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add</span><span class="hljs-params">(x,y <span class="hljs-type">int</span>)</span></span><span class="hljs-type">int</span>&#123;<br><span class="hljs-keyword">return</span> x+y<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sub</span><span class="hljs-params">(x,y <span class="hljs-type">int</span>)</span></span><span class="hljs-type">int</span>&#123;<br><span class="hljs-keyword">return</span> x-y<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的两个函数 <code>add</code>、<code>sub</code> 可以赋值给 <code>calculation</code> 类型的变量。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> x calculation<br>x = add<br>fmt.Println(x(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p><strong>高阶函数分为函数作为参数和函数作为返回值两个部分</strong></p><h3 id="函数作为参数"><a href="#函数作为参数" class="headerlink" title="函数作为参数"></a>函数作为参数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add</span><span class="hljs-params">(x, y <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;  <br>   <span class="hljs-keyword">return</span> x + y  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">calc</span><span class="hljs-params">(x, y <span class="hljs-type">int</span>, op <span class="hljs-keyword">func</span>(x, y <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span>) <span class="hljs-type">int</span> &#123;  <br>   <span class="hljs-keyword">return</span> op(x, y)  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>   i := calc(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, add)  <br>   fmt.Println(i)  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="函数作为返回值"><a href="#函数作为返回值" class="headerlink" title="函数作为返回值"></a>函数作为返回值</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">do</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> (<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span>, <span class="hljs-type">error</span>) &#123;  <br>   <span class="hljs-keyword">switch</span> s &#123;  <br>   <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;+&quot;</span>:  <br>      <span class="hljs-keyword">return</span> add, <span class="hljs-literal">nil</span>  <br>   <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;-&quot;</span>:  <br>      <span class="hljs-keyword">return</span> sub, <span class="hljs-literal">nil</span>  <br>   <span class="hljs-keyword">default</span>:  <br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.New(<span class="hljs-string">&quot;无法识别&quot;</span>)  <br>   &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(参数)</span></span>(返回值)&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>匿名函数没有函数名，没办法像普通函数那样调用，所以匿名函数需要保存到某个变量或者作为立即执行函数</p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p><strong>闭包指的是一个函数和其他相关的引用环境组合而成的实体。<code>闭包=函数+引用环境</code>。</strong> 例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">adder</span><span class="hljs-params">()</span></span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;  <br>   <span class="hljs-keyword">var</span> x <span class="hljs-type">int</span>  <br>   <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(y <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;  <br>      x += y  <br>      <span class="hljs-keyword">return</span> x  <br>   &#125;  <br>&#125;  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>   <span class="hljs-keyword">var</span> f = adder()  <br>   fmt.Println(f(<span class="hljs-number">1</span>))  <br>   fmt.Println(f(<span class="hljs-number">2</span>))  <br>&#125;<br><span class="hljs-comment">// 输出 1 3</span><br></code></pre></td></tr></table></figure><p>变量 <code>f</code> 是一个函数并且引用了外部作用域 <code>x</code> 变量，此时 <code>f</code> 就是一个闭包。在 <code>f</code> 的生命周期内，变量<code>x</code>一直有效 </p><h2 id="panic"><a href="#panic" class="headerlink" title="panic"></a>panic</h2><h2 id="recover"><a href="#recover" class="headerlink" title="recover"></a>recover</h2>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>编程语言</category>
      
      <category>Go</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Go语法</title>
    <link href="/posts/369/"/>
    <url>/posts/369/</url>
    
    <content type="html"><![CDATA[<h1 id="Go-语法"><a href="#Go-语法" class="headerlink" title="Go 语法"></a>Go 语法</h1><h2 id="Go-关键字"><a href="#Go-关键字" class="headerlink" title="Go 关键字"></a>Go 关键字</h2><blockquote><p>共25个</p></blockquote><p><code>break</code>  <code>default</code>  <code>func</code>  <code>interface</code> <code>select</code> <code>case</code> <code>defer</code> <code>go</code> <code>map</code> <code>struct</code> <code>chan</code> <code>else</code> <code>goto</code> <code>package</code> <code>switch</code> <code>const</code> <code>fallthrough</code> <code>if</code> <code>range</code> <code>type</code> <code>continue</code> <code>for</code> <code>import</code> <code>return</code> <code>var</code></p><h2 id="Go-保留字"><a href="#Go-保留字" class="headerlink" title="Go 保留字"></a>Go 保留字</h2><blockquote><p>共37个  </p></blockquote><p>Constants:<br><code>true</code> <code>false</code> <code>iota</code> <code>nil</code></p><p>Types:<br><code>int</code> <code>int8</code> <code>int16</code> <code>int32</code> <code>int64</code> <code>uint</code> <code>uint8</code> <code>uint16</code> <code>uint32</code> <code>uint64</code> <code>uintptr</code> <code>float32</code> <code>float64</code> <code>complex128</code> <code>complex64</code> <code>bool</code> <code>byte</code> <code>rune</code> <code>string</code> <code>error</code></p><p>Functions:<br><code>make</code> <code>len</code> <code>cap</code> <code>new</code> <code>append</code> <code>copy</code> <code>close</code> <code>delete</code> <code>complex</code> <code>real</code> <code>imag</code> <code>panic</code> <code>recover</code></p><h2 id="Go-变量"><a href="#Go-变量" class="headerlink" title="Go 变量"></a>Go 变量</h2><h3 id="Go-变量声明"><a href="#Go-变量声明" class="headerlink" title="Go 变量声明"></a>Go 变量声明</h3><ol><li>标准声明：<code>var 变量名 变量类型</code></li><li>批量声明：<code>var (a string; b string)</code></li></ol><h3 id="Go-变量初始化"><a href="#Go-变量初始化" class="headerlink" title="Go 变量初始化"></a>Go 变量初始化</h3><ol><li>标准声明：<code>var 变量名 类型 = 表达式</code></li></ol><h2 id="令牌"><a href="#令牌" class="headerlink" title="令牌"></a>令牌</h2><p>Go 程序包括各种令牌，令牌可以是一个关键字，一个标识符，常量，字符串文字或符号。例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Println(<span class="hljs-string">&quot;hello world&quot;</span>)<br></code></pre></td></tr></table></figure><p>由 6 个令牌组成，分别为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt<br>.<br>Println<br>(<br><span class="hljs-string">&quot;hello world&quot;</span><br>)<br></code></pre></td></tr></table></figure><h2 id="行分离器"><a href="#行分离器" class="headerlink" title="行分离器"></a>行分离器</h2><p>行的分隔符关键是一个语句终止。也就是说，每一个单独语句不需要特殊的分割线</p><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>标识符是用来标识标量，函数或任何其他用户定义的项目名称。一个标识符可以以字母或下划线开头，后面跟零个或多个字母，下划线和数字<br><code>identifier = letter &#123;letter | unicode_digit&#125;</code></p><h2 id="import-关键字"><a href="#import-关键字" class="headerlink" title="import 关键字"></a>import 关键字</h2><h3 id="三种特殊形式"><a href="#三种特殊形式" class="headerlink" title="三种特殊形式"></a>三种特殊形式</h3><h4 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> (  <br>   _ <span class="hljs-string">&quot;github.com/v2fly/v2ray-core/v4/main/distro/all&quot;</span><br>)<br></code></pre></td></tr></table></figure><p>这种方式导包，只是为了执行该包下所有的 <code>init()</code> 函数，所以也就没办法通过包名来调用包中的其他函数</p><h4 id="加点"><a href="#加点" class="headerlink" title="加点"></a>加点</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span>(<br>. <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>Println(<span class="hljs-string">&quot;hello world&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>这种方式导包，是为了之后在调用这个包的函数时，可以省略前缀的包名</p><h4 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> f <span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>f.Println(<span class="hljs-string">&quot;hello world&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>别名操作可以把包命名成另一个用起来比较容易记忆的名字</p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>编程语言</category>
      
      <category>Go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go指针</title>
    <link href="/posts/366/"/>
    <url>/posts/366/</url>
    
    <content type="html"><![CDATA[<h1 id="Go-指针"><a href="#Go-指针" class="headerlink" title="Go 指针"></a>Go 指针</h1><p><strong>指针式一种直接存储了变量的内存地址的数据类型。指针是可见的内存地址，<code>&amp;</code> 操作符可以返回一个变量的内存地址，并且 <code>*</code> 操作符可以获取指针指向的变量内容，但是在 Go 语言里没有指针运算，也就是不能像 c 语言里可以对指针进行加减操作</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>   <span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>  <br>   <span class="hljs-keyword">var</span> b = &amp;a  <br>   fmt.Printf(<span class="hljs-string">&quot;a:%d, ptr:%p, type:%T\n&quot;</span>, a, &amp;a, a) <span class="hljs-comment">// a:10, ptr:0xc0000b2008, type:*int  </span><br>   fmt.Printf(<span class="hljs-string">&quot;b:%d, ptr:%p, type:%T\n&quot;</span>, b, b, b)  <span class="hljs-comment">// b:824634449928, ptr:0xc0000b2008, type:*int  </span><br>   fmt.Printf(<span class="hljs-string">&quot;&amp;b:%d, ptr:%p\n&quot;</span>, *b, &amp;b)           <span class="hljs-comment">// &amp;b:10, ptr:0xc0000ac018  </span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><p><code>new</code> 是一个内置函数<br>定义: <code>func new(Type) *Type</code></p><ul><li>Type 表示类型，new 函数只接受一个参数，该参数是一个类型</li><li>*Type 表示类型指针，new 函数返回一个指向该类型内存地址的指针</li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>编程语言</category>
      
      <category>Go</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>编译原理</title>
    <link href="/posts/355/"/>
    <url>/posts/355/</url>
    
    <content type="html"><![CDATA[<h1 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ccard">type: folder_brief_live<br></code></pre></td></tr></table></figure><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><h3 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h3><h3 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h3><h3 id="语义分析"><a href="#语义分析" class="headerlink" title="语义分析"></a>语义分析</h3><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><h3 id="生成中间代码"><a href="#生成中间代码" class="headerlink" title="生成中间代码"></a>生成中间代码</h3><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><h3 id="生成目标代码"><a href="#生成目标代码" class="headerlink" title="生成目标代码"></a>生成目标代码</h3>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>编译原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>白夜行</title>
    <link href="/posts/230107/"/>
    <url>/posts/230107/</url>
    
    <content type="html"><![CDATA[<h1 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h1><blockquote><p>[!abstract] 白夜行</p><ul><li><img src="https://weread-1258476243.file.myqcloud.com/weread/cover/7/230107/t7_230107.jpg" alt=" 白夜行|200"></li><li>书名： 白夜行</li><li>作者： 东野圭吾</li><li>简介： 1999年，东野圭吾41岁正值盛年，写作出道已14年，在笔力、技巧、体力和雄心上都炉火纯青，于是洋洋洒洒写出了这部鸿篇巨制《白夜行》。这种规模宏大的长篇作品在职业作家一生的创作中极为罕见，完成后基本都被视为生涯代表作。《白夜行》一经推出即成为东野圭吾的长篇小说代表作，被万千书迷视为东野圭吾作品中的无冕之·王，畅销至今。《白夜行》中文版发行量超600万册，和《嫌疑人X的献身》《恶意》《解忧杂货店》并称为东野圭吾四大杰作。</li><li>出版时间 2017-07-21 00:00:00</li><li>ISBN： 9787544291163</li><li>分类： 精品小说-悬疑推理</li><li>出版社： 南海出版公司</li></ul></blockquote><h1 id="高亮划线"><a href="#高亮划线" class="headerlink" title="高亮划线"></a>高亮划线</h1><h2 id="7"><a href="#7" class="headerlink" title="7"></a>7</h2><h2 id="8"><a href="#8" class="headerlink" title="8"></a>8</h2><h2 id="9"><a href="#9" class="headerlink" title="9"></a>9</h2><h2 id="9-1"><a href="#9-1" class="headerlink" title="9"></a>9</h2><h2 id="6"><a href="#6" class="headerlink" title="6"></a>6</h2><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><h2 id="13"><a href="#13" class="headerlink" title="13"></a>13</h2><h1 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h1><h2 id="6-1"><a href="#6-1" class="headerlink" title="6"></a>6</h2><h3 id="划线评论"><a href="#划线评论" class="headerlink" title="划线评论"></a>划线评论</h3><ul><li>📌 一个男子  ^7570425-6QkBvOFoi<ul><li>💭 感觉这里的这个男子像是桐原</li><li>⏱ 2017-05-09 21:02:44</li></ul></li></ul><h2 id="7-1"><a href="#7-1" class="headerlink" title="7"></a>7</h2><h3 id="划线评论-1"><a href="#划线评论-1" class="headerlink" title="划线评论"></a>划线评论</h3><ul><li>📌 “清华有个姓仓桥的女人吧，仓桥香苗？”  ^7570425-6QkBMwD57<ul><li>💭 这里感觉是桐原和穗他们将江利子抓了，然后嫁祸给仓桥，但是又不明说，让一成来自己猜，可怕</li><li>⏱ 2017-05-09 21:06:51</li></ul></li></ul><h2 id="8-1"><a href="#8-1" class="headerlink" title="8"></a>8</h2><h3 id="划线评论-2"><a href="#划线评论-2" class="headerlink" title="划线评论"></a>划线评论</h3><ul><li>📌 “你说的难道是……”  ^7570425-6QkC3LGDc<ul><li>💭 果然和我想的一样，感觉好重的心机啊</li><li>⏱ 2017-05-09 21:11:06</li></ul></li></ul><h2 id="9-2"><a href="#9-2" class="headerlink" title="9"></a>9</h2><h3 id="划线评论-3"><a href="#划线评论-3" class="headerlink" title="划线评论"></a>划线评论</h3><ul><li>📌 银行发生了盗领事件。存款人在毫不知情的状况下，户头遭到盗领。受害者是东京都内的上班族，本月十日到银行柜台提领存款时，发现应有两百万元左右的余额变成零。调查结果发现，存款是于三协银行府中分行由银行卡分七次提领，最后一次提款是四月二十二日。被害人是在银行推广下，于一九七九年办理银行卡，但卡片一直放在办公室的办公桌内，从未使用。警方研判极有可能是银行卡遭到伪造，现正展开调——”  ^7570425-6QkDHzpZW<ul><li>💭 这一段和后面的关掉电视都 说明了这里埋了一个伏笔，而且在后面会有重要的描写</li><li>⏱ 2017-05-09 21:36:10</li></ul></li></ul><h2 id="9-3"><a href="#9-3" class="headerlink" title="9"></a>9</h2><h3 id="划线评论-4"><a href="#划线评论-4" class="headerlink" title="划线评论"></a>划线评论</h3><ul><li>📌 黑色西装的年轻男子  ^7570425-6QlBlEDko<ul><li>💭 看样子，这里的男子应该也是桐原，而且电话被监听应该确定了</li><li>⏱ 2017-05-10 12:46:54</li></ul></li></ul><h2 id="6-2"><a href="#6-2" class="headerlink" title="6"></a>6</h2><h3 id="划线评论-5"><a href="#划线评论-5" class="headerlink" title="划线评论"></a>划线评论</h3><ul><li>📌 一个男孩与一个女孩手牵手的图案。男孩戴着帽子，女孩头上系着大大的蝴蝶结，非常精致  ^7570425-6QlDDEGxY<ul><li>💭 这个不就是书的封面么</li><li>⏱ 2017-05-10 13:21:53</li></ul></li></ul><h3 id="划线评论-6"><a href="#划线评论-6" class="headerlink" title="划线评论"></a>划线评论</h3><ul><li>📌 一把剪刀，刀刃部分长达十余厘米，前端相当锐利。  ^7570425-6QlDAGO3n<ul><li>💭 ‘‘’细而锐利的刀刃，可能比水果刀更窄一点。‘’ 很像是杀死他父亲的啊</li><li>⏱ 2017-05-10 13:21:09</li></ul></li></ul><h3 id="划线评论-7"><a href="#划线评论-7" class="headerlink" title="划线评论"></a>划线评论</h3><ul><li>📌 白夜里走路  ^7570425-6QlDalRjU<ul><li>💭 白夜走路，所以才叫白夜行么</li><li>⏱ 2017-05-10 13:14:40</li></ul></li></ul><h2 id="4-1"><a href="#4-1" class="headerlink" title="4"></a>4</h2><h3 id="划线评论-8"><a href="#划线评论-8" class="headerlink" title="划线评论"></a>划线评论</h3><ul><li>📌 从新婚起，他们就分床睡，雪穗睡单人床。  ^7570425-6QlFZOeT7<ul><li>💭 新婚就分床睡？感觉 怪怪的</li><li>⏱ 2017-05-10 13:57:52</li></ul></li></ul><h2 id="3-1"><a href="#3-1" class="headerlink" title="3"></a>3</h2><h3 id="划线评论-9"><a href="#划线评论-9" class="headerlink" title="划线评论"></a>划线评论</h3><ul><li>📌 氰化钾  ^7570425-6QmmSt2cR<ul><li>💭 看来是这个害死的今枝，那个侦探</li><li>⏱ 2017-05-11 00:52:37</li></ul></li></ul><h2 id="5-1"><a href="#5-1" class="headerlink" title="5"></a>5</h2><h3 id="划线评论-10"><a href="#划线评论-10" class="headerlink" title="划线评论"></a>划线评论</h3><ul><li>📌 不久，一些鬼鬼祟祟的男人就常往这里跑，进大楼的时候还偷偷摸摸的，怕别人看到。一开始，我不知道在大楼里能干吗，问别的小孩，也没人知道，大人也不肯告诉我们。不过没多久，就有人搜集到消息了。他说那里好像是男人买女人的地方，只要付一万  ^7570425-6QmSsi9R8<ul><li>💭 这里是最开始的时候 的那个一万卖身的地方吧，从这里开始 ，应该慢慢的填坑了</li><li>⏱ 2017-05-11 08:54:47</li></ul></li></ul><h2 id="13-1"><a href="#13-1" class="headerlink" title="13"></a>13</h2><h3 id="划线评论-11"><a href="#划线评论-11" class="headerlink" title="划线评论"></a>划线评论</h3><ul><li>📌 老公的兴趣  ^7570425-6QmV6M7ea<ul><li>💭 看到那个洋介，当铺老板是喜欢幼女，所以应该可以推出，是她把雪穗给强奸了，才会有后面的故事吧</li><li>⏱ 2017-05-11 09:35:17</li></ul></li></ul><h1 id="本书评论"><a href="#本书评论" class="headerlink" title="本书评论"></a>本书评论</h1>]]></content>
    
    
    <categories>
      
      <category>微信读书</category>
      
      <category>精品小说</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>脂砚斋评石头记（全集）</title>
    <link href="/posts/814416/"/>
    <url>/posts/814416/</url>
    
    <content type="html"><![CDATA[<h1 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h1><blockquote><p>[!abstract] 脂砚斋评石头记（全集）</p><ul><li><img src="https://wfqqreader-1252317822.image.myqcloud.com/cover/416/814416/t7_814416.jpg" alt=" 脂砚斋评石头记（全集）|200"></li><li>书名： 脂砚斋评石头记（全集）</li><li>作者： 曹雪芹 脂砚斋评</li><li>简介：     《石头记》是中国古代小说的之作，从传抄面世之初，各个抄本上都保留了大量的朱红色批语，一些重要的传抄版本上题有《脂砚斋重评石头记》的字样，所以后人便称这些早期的《红楼梦》抄本为“脂评本”或“脂批本”。</li></ul></blockquote><blockquote><ul><li>出版时间 2016-03-21 00:00:00</li><li>ISBN： </li><li>分类： 历史-历史典籍</li><li>出版社： 阅文集团</li></ul></blockquote><h1 id="高亮划线"><a href="#高亮划线" class="headerlink" title="高亮划线"></a>高亮划线</h1><h2 id="第二回-贾夫人仙逝扬州城-冷子兴演说荣国府"><a href="#第二回-贾夫人仙逝扬州城-冷子兴演说荣国府" class="headerlink" title="第二回 贾夫人仙逝扬州城 冷子兴演说荣国府"></a>第二回 贾夫人仙逝扬州城 冷子兴演说荣国府</h2><ul><li>📌 以百回之大文，先以此回作两大笔以冒之，诚是大观。世态人情，尽盘旋于其间，而一线不乱，非具龙象力者其孰能哉。此回亦非正文，本旨只在冷子兴一人，即俗谓冷中出热、无中生有也。其演说荣府一篇者，盖因族大人多，若从作者笔下一一叙出，尽一二回不能得明，则成何文字。故借用冷子一人，略出其大半，使阅者心中已有一荣府隐隐在心。然后用黛玉、宝钗等两三次皴染，则耀然于心中眼中矣。此即画家三染法也。未写荣府正人，先写外戚，是由远及近，由小至大也。若使先叙出荣府，然后一一叙及外戚，又一一至朋友，至奴仆，其死板拮据之笔，岂作十二钗人手中之物也。今先写外戚者，正是写荣国一府也。故又怕闲文赘累，开笔即先写贾夫人已死，是特使黛玉入荣之速也。通灵宝玉于士隐梦中一出，今（又）于子兴口中一出，阅者已洞然矣。然后于黛玉、宝钗二人目中，极精极细一描，则是文章锁合处。盖不肯一笔直下，有若放闸之水，燃信之爆，使其精华一泄而无余也。究竟此玉原应出自钗、黛目中，方有照应。今预从子兴口中说出，实虽写而却未写。观其后文可知，此一回则是虚敲旁击之文，笔则是反逆隐曲之笔。诗云： ^814416-4-860<ul><li>⏱ 2018-07-21 12:48:44</li></ul></li></ul><h2 id="第十二回-王熙凤毒设相思局-贾天祥正照风月鉴"><a href="#第十二回-王熙凤毒设相思局-贾天祥正照风月鉴" class="headerlink" title="第十二回 王熙凤毒设相思局 贾天祥正照风月鉴"></a>第十二回 王熙凤毒设相思局 贾天祥正照风月鉴</h2><ul><li>📌 贾瑞侧耳听着，半日不见人来，忽听“咯噔”一声，东边的门也倒关了。[平平略施小计。]贾瑞急的也不敢则声，只得悄悄的出来，将门撼了撼，关的铁桶一般。[此大抵是凤姐调遣，不先为点明者，可以少许多事故，又可以藏拙。]此时要求出去，亦不能够。南北皆是大房墙，要跳亦无攀援。这屋内又是过门风，空落落的。现是腊月天气，夜又长，朔风凛凛，侵肌裂骨，一夜几乎不曾冻死。[可为偷情一戒。][教导之法，慈悲之心尽矣，无奈迷途不悟何！]好容易盼到早晨，只见一个老婆子先将东门开了，进来去叫西门。贾瑞瞅他背着脸，一溜烟抱着肩竟跑了出来。幸而天气尚早，人都未起，从后门一径跑回家去。原来贾瑞父母早亡，只有他祖父代儒教养。那代儒素日教训最严，[教训最严，奈其心何。一叹！]不许贾瑞多走一步，生怕他在外吃酒赌钱，有误学业。今忽见他一夜不归，只料定他在外非饮即赌，嫖娼宿妓，[展转灵活，一人不放，一笔不肖。]那里想到这段公案！[世人万万想不到，况老学究乎！]因此气了一夜。贾瑞也捻着一把汗，少不得回来撒谎，只说：“往舅舅家去了，天黑了，留我住了一夜。”代儒道：“自来出门，非禀我不敢擅出，如何昨日私自去了？据此亦该打，何况是撒谎。”因此，发狠到底打了三四十板，[教令何尝不好，业种故此不同。]不许吃饭，令他跪在院内读文章，定要补出十天的工课来方罢。[处处点父母痴心，子孙不肖。此书系自愧而成。]贾瑞直冻了一夜，今又遭了苦打，且饿着肚子，跪在风地里读文章， [祸福无门，惟人自招。 ^814416-14-2588<ul><li>⏱ 2018-12-18 08:44:02</li></ul></li></ul><h2 id="第十六回-贾元春才选凤藻宫-秦鲸卿夭逝黄泉路"><a href="#第十六回-贾元春才选凤藻宫-秦鲸卿夭逝黄泉路" class="headerlink" title="第十六回 贾元春才选凤藻宫 秦鲸卿夭逝黄泉路"></a>第十六回 贾元春才选凤藻宫 秦鲸卿夭逝黄泉路</h2><ul><li>📌 ]笑道：“你能在这一行么？[勾下文。]这个事虽不算甚大，里头大有藏掖的。”[射利人微露心迹。][射利语，可叹是亲侄。]贾蔷笑道：“只好习学着办罢了。”贾蓉在身后灯影下悄拉凤姐衣襟，凤姐会意，因笑道：“你也太操心了，难道大爷比咱们还不会用人？偏你又怕他不在行了，谁都是在行的！孩子们已长的这么大了，没吃过猪肉，也看见过猪跑。大爷派他去，原不过是个坐纛旗儿，难道认真的叫他去讲价钱会经纪去呢！依我说就很好。”贾琏道：“自然是这样，并不是我驳回，少不得替他算计算计。”因问：“这一项银子动那一处的？”贾蔷道：“才也议到这里。赖爷爷说，[此等称呼，令人酸鼻。][好称呼。]不用从京里带下去，江南甄家还收着我们五万银子。明日写一封书信会票我们带去，先支三万，下剩二万存着，等置办花烛彩灯并各色帘栊帐幔的使费。”贾琏点头道：“这个主意好。”[《石头记》中多作心传神会之文，不必道明，一道明白，便入庸俗之套。]凤姐忙向贾蔷道：[再不略让一步，正是阿凤一生短处。]“既这样，我有两个在行妥当人，你就带他们去办，这个便宜了你呢。”贾蔷忙陪笑道：“正要和婶子讨两个人呢，[写贾蔷乖处。]这可巧了。”因问名字，凤姐便问赵嬷嬷。彼时赵嬷嬷已听呆了话，平儿忙笑推他，他才醒悟过来，[真是强将手下无弱兵。至精至细。]忙说：“一个叫赵天梁，一个叫赵天栋。”凤姐道：“可别忘了，我可干我的去了。”说着便出去了。贾蓉忙送出来，又悄悄向凤姐道：“婶子要带什么东西，吩咐开个帐，给蔷兄弟带了去，叫他按帐置办了来。” ^814416-18-12090<ul><li>⏱ 2019-01-25 21:45:24</li></ul></li></ul><h1 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h1><h1 id="本书评论"><a href="#本书评论" class="headerlink" title="本书评论"></a>本书评论</h1>]]></content>
    
    
    <categories>
      
      <category>微信读书</category>
      
      <category>历史</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>美元真相</title>
    <link href="/posts/39481983/"/>
    <url>/posts/39481983/</url>
    
    <content type="html"><![CDATA[<h1 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h1><blockquote><p>[!abstract] 美元真相</p><ul><li><img src="https://wfqqreader-1252317822.image.myqcloud.com/cover/983/39481983/t7_39481983.jpg" alt=" 美元真相|200"></li><li>书名： 美元真相</li><li>作者： 达尔辛妮·大卫</li><li>简介： 为什么我们比父辈买得起更多衣服，却买不起房子？为什么国际油价在跌，汽油价格却不跟着跌？为什么奢侈品国外卖那么便宜，到国内却贵那么多？为什么俄罗斯人喜欢到德国买房？这一切日常问题的背后力量都是经济。跟随1美元的环球流通之旅，我们可以把小问题和大道理联系起来。在这本通俗易懂的经济学读物中，经济学家达尔辛妮·大卫跟随1美元从一个消费者到另一个消费者的足迹，以旁观者的口吻讲述了全球化世界运转的规律，深入浅出地揭示了全球化、贸易战、国债、关税、汇率等经济学基本概念，剖析了全球各国间的关系；用直观形象的写作手法，揭示了全球化世界究竟是如何运行的。这本书以一种有趣而有启发性的方式解读经济现象，让对经济学完全没有概念的我们也能轻松理解全球经济。</li><li>出版时间 2021-06-01 00:00:00</li><li>ISBN： 9787521728774</li><li>分类： 经济理财-财经</li><li>出版社： 中信出版社</li></ul></blockquote><h1 id="高亮划线"><a href="#高亮划线" class="headerlink" title="高亮划线"></a>高亮划线</h1><h2 id="第7章-混合家庭的实验：从俄罗斯到德国"><a href="#第7章-混合家庭的实验：从俄罗斯到德国" class="headerlink" title="第7章 混合家庭的实验：从俄罗斯到德国"></a>第7章 混合家庭的实验：从俄罗斯到德国</h2><ul><li>📌 华尔特·罗斯托起飞模型 ^39481983-11-3397-3408<ul><li>⏱ 2022-04-03 09:48:02</li></ul></li></ul><h1 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h1><h1 id="本书评论"><a href="#本书评论" class="headerlink" title="本书评论"></a>本书评论</h1>]]></content>
    
    
    <categories>
      
      <category>微信读书</category>
      
      <category>经济理财</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>结构性改革</title>
    <link href="/posts/33362049/"/>
    <url>/posts/33362049/</url>
    
    <content type="html"><![CDATA[<h1 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h1><blockquote><p>[!abstract] 结构性改革</p><ul><li><img src="https://wfqqreader-1252317822.image.myqcloud.com/cover/49/33362049/t7_33362049.jpg" alt=" 结构性改革|200"></li><li>书名： 结构性改革</li><li>作者： 黄奇帆</li><li>简介： 恰逢百年未有之大变局，经济转型发展、中美贸易摩擦、新冠疫情暴发等问题交相叠加，无不考验着我国面对复杂问题的智慧和勇气，供给侧结构性改革的重要性与紧迫性空前凸显。这本书从基础性、结构性、机制性、制度性等多个维度，深入剖析我国供给侧关键矛盾并对症下药。 全书一共七章。第 一章详解如何紧抓供给侧结构性改革主线；第二章聚焦去杠杆与金融风险防范；第三章解读新时代下我国资本市场高质量发展之路；第四章讲述“数字化”如何重塑经济社会生态；第五章对房地产长效调控机制开出药方，并预判今后十年房地产行业六大趋势；第六章着眼于国有企业资本运作与地方政府营商环境改善；第七章阐释新局面、新特征下，我国对国际形势与中美关系的应对之道，深入剖析“双循环”新格局。</li><li>出版时间 2020-08-01 00:00:00</li><li>ISBN： 9787521718645</li><li>分类： 经济理财-财经</li><li>出版社： 中信出版社</li></ul></blockquote><h1 id="高亮划线"><a href="#高亮划线" class="headerlink" title="高亮划线"></a>高亮划线</h1><h2 id="序一-一部为解决经济难题提供对策的好书"><a href="#序一-一部为解决经济难题提供对策的好书" class="headerlink" title="序一 一部为解决经济难题提供对策的好书"></a>序一 一部为解决经济难题提供对策的好书</h2><ul><li>📌 人民日益增长的美好生活需要和不平衡不充分的发展之间的矛盾 ^33362049-4-839-867<ul><li>⏱ 2021-01-23 15:52:09</li></ul></li></ul><h1 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h1><h1 id="本书评论"><a href="#本书评论" class="headerlink" title="本书评论"></a>本书评论</h1>]]></content>
    
    
    <categories>
      
      <category>微信读书</category>
      
      <category>经济理财</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>哲学家们都干了些什么</title>
    <link href="/posts/821598/"/>
    <url>/posts/821598/</url>
    
    <content type="html"><![CDATA[<h1 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h1><blockquote><p>[!abstract] 哲学家们都干了些什么</p><ul><li><img src="https://wfqqreader-1252317822.image.myqcloud.com/cover/598/821598/t7_821598.jpg" alt=" 哲学家们都干了些什么|200"></li><li>书名： 哲学家们都干了些什么</li><li>作者： 林欣浩</li><li>简介：     “哲学史写得这么浅白风趣八卦，你让我们哲学系的人还怎么混？！”用穷凶极恶的吐槽和喜闻乐见的八卦，彻底瓦解你对哲学史的成见，翻开任何一页，都是欲罢不能的哲学故事。来吧，哲学家们！自己说说看，你们究竟都干了些什么？宇宙的外面是什么？世界会不会是假的？上帝到底存在还是不存在？这个世界有没有终极真理？……你知道吗，你想过或者没想过的这些奇形怪状的问题，早在几千年前就被哲学家们一本正经地提出，挖空心思地找证据，面红耳赤地争论过了。在整个世界忙着探索、发展的漫长历史中，这帮哲学家们却神经质地死磕这个世界的真相和人生的意义，就好像一个网络游戏里的角色试图琢磨自己手里武器的代码是什么……</li></ul></blockquote><blockquote><ul><li>出版时间 2015-04-01 00:00:00</li><li>ISBN： 9787550242234</li><li>分类： 哲学宗教-哲学读物</li><li>出版社： 北京联合出版公司</li></ul></blockquote><h1 id="高亮划线"><a href="#高亮划线" class="headerlink" title="高亮划线"></a>高亮划线</h1><h1 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h1><h1 id="本书评论"><a href="#本书评论" class="headerlink" title="本书评论"></a>本书评论</h1><h2 id="书评-No-1"><a href="#书评-No-1" class="headerlink" title="书评 No.1"></a>书评 No.1</h2><p>哲学的科普书还是得可以，看完使我对哲学感到了兴趣。<br>以前觉得哲学的作用只是为了问那三个问题：<br>我是谁？我从哪里来？我到哪里去？<br>看完后觉得哲学是对世间所有的问题都去寻找一个最终的答案  ^7570425-7nS6FGNZh<br>⏱ 2021-02-04 23:06:40</p><h2 id="书评-No-2"><a href="#书评-No-2" class="headerlink" title="书评 No.2"></a>书评 No.2</h2><p> ^7570425-7nS6goplV<br>⏱ 2021-02-04 23:00:27</p>]]></content>
    
    
    <categories>
      
      <category>微信读书</category>
      
      <category>哲学宗教</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>如何阅读一本书</title>
    <link href="/posts/856735/"/>
    <url>/posts/856735/</url>
    
    <content type="html"><![CDATA[<h1 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h1><blockquote><p>[!abstract] 如何阅读一本书</p><ul><li><img src="https://wfqqreader-1252317822.image.myqcloud.com/cover/735/856735/t7_856735.jpg" alt=" 如何阅读一本书|200"></li><li>书名： 如何阅读一本书</li><li>作者： 轻阅读编写组</li><li>简介： 读懂一本书，精于一件事，好方法比努力更重要。这是一本可靠的阅读技巧训练手册！每天8分钟，让你读得快、记得牢、学得透。林语堂、余秋雨、周国平倾情推荐你学会阅读！</li><li>出版时间 2017-03-01 00:00:00</li><li>ISBN： 9787513911504</li><li>分类： 生活百科-育儿</li><li>出版社： 民主与建设出版社</li></ul></blockquote><h1 id="高亮划线"><a href="#高亮划线" class="headerlink" title="高亮划线"></a>高亮划线</h1><h2 id="Why：为什么要阅读"><a href="#Why：为什么要阅读" class="headerlink" title="Why：为什么要阅读"></a>Why：为什么要阅读</h2><ul><li>📌 “读史使人明智，读诗使人灵秀，数学使人周密，物理学使人深刻，伦理学使人庄重，逻辑修辞之学则使人善辩：凡有所学，皆成性格。 ^856735-6-1626-1686<ul><li>⏱ 2017-06-22 12:45:13</li></ul></li></ul><h2 id="How：如何阅读一本书"><a href="#How：如何阅读一本书" class="headerlink" title="How：如何阅读一本书"></a>How：如何阅读一本书</h2><ul><li>📌 1．以缺乏时间为借口拒绝读书的人，需要更强烈的阅读动机和更有效的阅读方法。2．因旁人的眼光而拒绝读书的人，需要更强的专注力。3．只买书来读的人，需要警惕“藏而不读”。4．书非读完不可的人可以试着学会略读，用来处理分明不喜欢、心中却放不下的书。5．从不在书上涂画的人可以尝试边读边写，从现在起，拿起笔来阅读。6．只读不评，阅读的效果会减少一半。阅读虽是个人行为，本质却是交流。7．书可以多次阅读，但在不懂之处不断回读，并不是最好的解决办法。8．逐字逐句地阅读，是低效的阅读方式。也许你并不如自己想象中那么认真。9．读过就忘，说明阅读的效果还不佳，需要加强记忆与理解。10．只读经典或许会使人陷入误区，也容易让人产生阅读上的优越感。对于关注的主题，还是广泛阅读更好。 ^856735-9-1144-1736<ul><li>⏱ 2017-06-23 09:10:34</li></ul></li></ul><h1 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h1><h1 id="本书评论"><a href="#本书评论" class="headerlink" title="本书评论"></a>本书评论</h1>]]></content>
    
    
    <categories>
      
      <category>微信读书</category>
      
      <category>生活百科</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>简单之美：软件开发实践者的思考</title>
    <link href="/posts/602534/"/>
    <url>/posts/602534/</url>
    
    <content type="html"><![CDATA[<h1 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h1><blockquote><p>[!abstract] 简单之美：软件开发实践者的思考</p><ul><li><img src="https://wfqqreader-1252317822.image.myqcloud.com/cover/534/602534/t7_602534.jpg" alt=" 简单之美：软件开发实践者的思考|200"></li><li>书名： 简单之美：软件开发实践者的思考</li><li>作者： 倪健</li><li>简介： 本书不是一本关于方法论的理论性书籍（尽管已经尝试在大量的思考上进行一些理论归纳），也不是一本关于具体技术的操作手册。本书为读者呈现的是作者在软件开发实践中的思考和体验，目的在于探究实践中的问题的根源，并给出思想上的解决之道。本书以软件开发的基本顺序为主线，以简单、想象和文化的开发思想为线索，以为软件开发实践提供指导价值为目标。本书力图做到传递经过组织的、可操作的软件开发经验，使软件开发领域的新手在知识（软件开发思想）积累过程中少走弯路，也使软件开发领域的老手可以对照自己的经验把可能的困惑降到最低。有一些有趣例子为那些有价值的思考提供支持。本书中，作者尝试对简单、想象和文化做一些形而上的思考。这些思考会比较抽象，但却是很多话题的基础。</li><li>出版时间 2010-04-01 00:00:00</li><li>ISBN： 9787111301035</li><li>分类： 计算机-计算机综合</li><li>出版社： 机械工业出版社</li></ul></blockquote><h1 id="高亮划线"><a href="#高亮划线" class="headerlink" title="高亮划线"></a>高亮划线</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>📌 什么样的信息是有效的呢？简洁明确的思想表述；层次清晰的分类信息；令人信服的论证过程。 ^602534-4-6199-6317<ul><li>⏱ 2017-07-11 09:46:17</li></ul></li></ul><h1 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h1><h1 id="本书评论"><a href="#本书评论" class="headerlink" title="本书评论"></a>本书评论</h1>]]></content>
    
    
    <categories>
      
      <category>微信读书</category>
      
      <category>计算机</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>东周列国志：中国古典白话短篇小说的巅峰</title>
    <link href="/posts/814401/"/>
    <url>/posts/814401/</url>
    
    <content type="html"><![CDATA[<h1 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h1><blockquote><p>[!abstract] 东周列国志：中国古典白话短篇小说的巅峰</p><ul><li><img src="https://wfqqreader-1252317822.image.myqcloud.com/cover/401/814401/t7_814401.jpg" alt=" 东周列国志：中国古典白话短篇小说的巅峰|200"></li><li>书名： 东周列国志：中国古典白话短篇小说的巅峰</li><li>作者： 冯梦龙</li><li>简介： 《东周列国志》是明代著名白话历史演义小说，以春秋五霸和战国七雄为主线，描写了西周末年到秦统一六国五百多年间的璀璨历史，其场面之宏大，跨度之久，事件之复杂，人物之多，描绘之深刻，后世史书只能望其项背。一个个以时间为顺序串联的列国故事，把上起治国、强军、富民之道，下至为人、做事、相处之策兼包并蓄，成为后世评判是非成败的标准和榜样，至今依然影响深远。</li><li>出版时间 2016-03-21 00:00:00</li><li>ISBN： </li><li>分类： 文学-古典文学</li><li>出版社： 阅文集团</li></ul></blockquote><h1 id="高亮划线"><a href="#高亮划线" class="headerlink" title="高亮划线"></a>高亮划线</h1><h2 id="第四回-秦文公郊天应梦-郑庄公掘地见母"><a href="#第四回-秦文公郊天应梦-郑庄公掘地见母" class="headerlink" title="第四回 秦文公郊天应梦 郑庄公掘地见母"></a>第四回 秦文公郊天应梦 郑庄公掘地见母</h2><ul><li>📌 白帝 ^814401-6-1738-1740<ul><li>⏱ 2017-06-12 19:02:50</li></ul></li></ul><h1 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h1><h2 id="第四回-秦文公郊天应梦-郑庄公掘地见母-1"><a href="#第四回-秦文公郊天应梦-郑庄公掘地见母-1" class="headerlink" title="第四回 秦文公郊天应梦 郑庄公掘地见母"></a>第四回 秦文公郊天应梦 郑庄公掘地见母</h2><h3 id="划线评论"><a href="#划线评论" class="headerlink" title="划线评论"></a>划线评论</h3><ul><li>📌 白帝  ^7570425-6RacblmGI<ul><li>💭 白帝是秦文公   那么 秦始皇是白帝的后裔 ，刘邦 灭秦    有趣的是 刘备死在白帝城  传说中的天理循环？</li><li>⏱ 2017-06-12 19:02:51</li></ul></li></ul><h1 id="本书评论"><a href="#本书评论" class="headerlink" title="本书评论"></a>本书评论</h1>]]></content>
    
    
    <categories>
      
      <category>微信读书</category>
      
      <category>文学</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>苏格兰女王的悲剧（玛丽·斯图亚特传）</title>
    <link href="/posts/816218/"/>
    <url>/posts/816218/</url>
    
    <content type="html"><![CDATA[<h1 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h1><blockquote><p>[!abstract] 苏格兰女王的悲剧（玛丽·斯图亚特传）</p><ul><li><img src="https://wfqqreader-1252317822.image.myqcloud.com/cover/218/816218/t7_816218.jpg" alt=" 苏格兰女王的悲剧（玛丽·斯图亚特传）|200"></li><li>书名： 苏格兰女王的悲剧（玛丽·斯图亚特传）</li><li>作者： 斯蒂芬·茨威格</li><li>简介： 本书是奥地利著名作家斯蒂芬·茨威格具有代表性的人物传记作品之一，茨威格的作品以刻画人物内心活动著称。本版由国内著名翻译家侯焕闳老师翻译并重新修订，其翻译作品一直受到国内读者高度认可和好评。本书对苏格兰女王玛丽·斯图亚特一生做了精彩而又深入细致的剖析，既充分展示了她跌宕起伏、命远多舛的女王生涯，又生动深刻地刻画了她作为一个女人对爱情飞蛾扑火般的执着追求。玛丽·斯图亚特，十六世纪宗教改革时期苏格兰的女王，出生六天便继承了苏格兰王位，十六岁时获得法国王后、苏格兰女王、英格兰女王三顶王冠，荣耀一时。十九岁时返回苏格兰亲政，后因宗教矛盾的激化以及涉嫌参与谋杀她的丈夫而引起苏格兰贵族的不满。</li><li>出版时间 2014-07-01 00:00:00</li><li>ISBN： 9787547030028</li><li>分类： 人物传记-女性人物</li><li>出版社： 万卷出版公司</li></ul></blockquote><h1 id="高亮划线"><a href="#高亮划线" class="headerlink" title="高亮划线"></a>高亮划线</h1><h2 id="封面"><a href="#封面" class="headerlink" title="封面"></a>封面</h2><ul><li>📌 [插图] ^816218-1-376<ul><li>⏱ 2018-02-07 09:06:02</li></ul></li></ul><h1 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h1><h1 id="本书评论"><a href="#本书评论" class="headerlink" title="本书评论"></a>本书评论</h1>]]></content>
    
    
    <categories>
      
      <category>微信读书</category>
      
      <category>人物传记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>嫌疑人X的献身</title>
    <link href="/posts/230110/"/>
    <url>/posts/230110/</url>
    
    <content type="html"><![CDATA[<h1 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h1><blockquote><p>[!abstract] 嫌疑人X的献身</p><ul><li><img src="https://wfqqreader-1252317822.image.myqcloud.com/cover/110/230110/t7_230110.jpg" alt=" 嫌疑人X的献身|200"></li><li>书名： 嫌疑人X的献身</li><li>作者： 东野圭吾</li><li>简介： 日本推理小说天王、直木奖得主东野圭吾“迄今为止最高杰作”，创造了日本推理小说史上绝无仅有的奇迹，将第134届直木奖、第6届本格推理小说大奖及当年度日本三大推理小说排行榜第一名全部收入囊中。百年一遇的数学天才石神，每天都去固定的便当店买午餐，只为看一眼在那里做事的邻居靖子。与女儿相依为命的靖子，失手杀了上门纠缠勒索的前夫。为救靖子，石神挺身料理善后，以数学家缜密的逻辑思考设了一个匪夷所思的局，以令人惊骇莫名的诡计诠释了一份无比真挚纯粹的爱情……”</li><li>出版时间 2010-01-01 00:00:00</li><li>ISBN： 9787544245555</li><li>分类： 精品小说-悬疑推理</li><li>出版社： 南海出版公司</li></ul></blockquote><h1 id="高亮划线"><a href="#高亮划线" class="headerlink" title="高亮划线"></a>高亮划线</h1><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><ul><li>📌 的衣物。衣物塞在一斗深的桶里，遭到部分焚烧，包括外套、毛衣、长裤、袜子和内衣。应是凶手点火后立即离去，没想到衣物并未继续燃烧，火很快就熄灭了。专案组并未提议针对这些衣物清查制造厂商，这些衣物显然属于批量生产的成衣。画像技术人员根据衣物和死者的体格，画出了被害者生前的模样。一些调查人员拿着这张图，以筱崎车站为中心四处收集相关信息。可能是这样的服装实在不够惹眼，几圈下来并未打听到任何有用的信息。新闻节目中也发布了这张肖像图，不久倒是收到了一大堆线索，但是没有一个能和尸体扯上关系。另外，警方针对报失人口进行了认真的比对，但没找到任何线索。接着，警方以江户川区为中心，彻底清查附近是否有近期失踪的独居男子，或是突然失踪的旅馆房客。最后，终于得到一条线索。位于龟户的出租旅馆扇屋，有一名房客失踪了。旅馆是在三月十一日发现房客失踪的，也就是尸体被人发现那天。由于已过了退房时间，旅馆员工只好去房间查看，却只看到少许行李，人不见踪影。由于经营者事先收了房钱，因而并未报警。警方立刻从房间和行李上采集到毛发与指纹，竟与尸体的完全一致！此外，从自行车上采到的指纹之一，也与房间行李上留下的指纹完全相同！失踪客人在旅馆登记簿上留下的姓名为“富樫慎二”，住 ^230110-5-5708<ul><li>⏱ 2017-05-14 02:30:49</li></ul></li></ul><h1 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h1><h1 id="本书评论"><a href="#本书评论" class="headerlink" title="本书评论"></a>本书评论</h1><h2 id="书评-No-1"><a href="#书评-No-1" class="headerlink" title="书评 No.1"></a>书评 No.1</h2><p>比上一本有趣些 ^7570425-6QorcZUL0<br>⏱ 2017-05-12 09:32:06</p>]]></content>
    
    
    <categories>
      
      <category>微信读书</category>
      
      <category>精品小说</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>货币论（全两册）</title>
    <link href="/posts/184066/"/>
    <url>/posts/184066/</url>
    
    <content type="html"><![CDATA[<h1 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h1><blockquote><p>[!abstract] 货币论（全两册）</p><ul><li><img src="https://wfqqreader-1252317822.image.myqcloud.com/cover/66/184066/t7_184066.jpg" alt=" 货币论（全两册）|200"></li><li>书名： 货币论（全两册）</li><li>作者： 凯恩斯</li><li>简介： 通货膨胀永远是、而且在任何地方都只是一种货币现象。</li></ul></blockquote><blockquote><ul><li>出版时间 2008-07-01 00:00:00</li><li>ISBN： 9787561342299</li><li>分类： 经济理财-财经</li><li>出版社： 陕西师范大学出版社</li></ul></blockquote><h1 id="高亮划线"><a href="#高亮划线" class="headerlink" title="高亮划线"></a>高亮划线</h1><h1 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h1><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="章节评论-No-1"><a href="#章节评论-No-1" class="headerlink" title="章节评论 No.1"></a>章节评论 No.1</h3><ul><li>嗯嗯，货币是一个国家的信用，那么因此会具有不稳定性，因此我觉得马克思在这里说是天然货币是指，金银在货币上的稳定性，所以金银天生就可以当做货币 ^7570425-6TbkybtDI<ul><li>⏱ 2017-09-03 01:24:27</li></ul></li></ul><h1 id="本书评论"><a href="#本书评论" class="headerlink" title="本书评论"></a>本书评论</h1>]]></content>
    
    
    <categories>
      
      <category>微信读书</category>
      
      <category>经济理财</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
